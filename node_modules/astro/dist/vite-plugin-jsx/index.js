import babel from "@babel/core";
import esbuild from "esbuild";
import * as colors from "kleur/colors";
import * as eslexer from "es-module-lexer";
import path from "path";
import { error } from "../core/logger.js";
import { parseNpmName } from "../core/util.js";
const JSX_RENDERER_CACHE = new WeakMap();
const JSX_EXTENSIONS = new Set([".jsx", ".tsx"]);
const IMPORT_STATEMENTS = {
  react: "import React from 'react'",
  preact: "import { h } from 'preact'",
  "solid-js": "import 'solid-js/web'"
};
const PREVENT_UNUSED_IMPORTS = ";;(React,Fragment,h);";
function getEsbuildLoader(fileExt) {
  return fileExt.substr(1);
}
async function importJSXRenderers(rendererNames) {
  const renderers = new Map();
  await Promise.all(rendererNames.map((name) => import(name).then(({ default: renderer }) => {
    if (!renderer.jsxImportSource)
      return;
    renderers.set(renderer.jsxImportSource, renderer);
  })));
  return renderers;
}
async function transformJSX({ code, mode, id, ssr, renderer }) {
  const { jsxTransformOptions } = renderer;
  const options = await jsxTransformOptions({ mode, ssr });
  const plugins = [...options.plugins || []];
  const result = await babel.transformAsync(code, {
    presets: options.presets,
    plugins,
    cwd: process.cwd(),
    filename: id,
    ast: false,
    compact: false,
    sourceMaps: true,
    configFile: false,
    babelrc: false
  });
  if (!result)
    return null;
  return {
    code: result.code || "",
    map: result.map
  };
}
function jsx({ config, logging }) {
  let viteConfig;
  return {
    name: "astro:jsx",
    enforce: "pre",
    configResolved(resolvedConfig) {
      viteConfig = resolvedConfig;
    },
    async transform(code, id, opts) {
      const ssr = Boolean(opts == null ? void 0 : opts.ssr);
      if (!JSX_EXTENSIONS.has(path.extname(id))) {
        return null;
      }
      const { mode } = viteConfig;
      let jsxRenderers = JSX_RENDERER_CACHE.get(config);
      if (!jsxRenderers) {
        jsxRenderers = new Map();
        const possibleRenderers = await importJSXRenderers(config.renderers);
        if (possibleRenderers.size === 0) {
          throw new Error(`${colors.yellow(id)}
Unable to resolve a renderer that handles JSX transforms! Please include a \`renderer\` plugin which supports JSX in your \`astro.config.mjs\` file.`);
        }
        for (const [importSource2, renderer] of possibleRenderers) {
          jsxRenderers.set(importSource2, renderer);
        }
        JSX_RENDERER_CACHE.set(config, jsxRenderers);
      }
      if (jsxRenderers.size === 1) {
        const { code: jsxCode } = await esbuild.transform(code, {
          loader: getEsbuildLoader(path.extname(id)),
          jsx: "preserve",
          sourcefile: id,
          sourcemap: "inline"
        });
        return transformJSX({ code: jsxCode, id, renderer: [...jsxRenderers.values()][0], mode, ssr });
      }
      const { code: jsCode } = await esbuild.transform(code + PREVENT_UNUSED_IMPORTS, {
        loader: getEsbuildLoader(path.extname(id)),
        jsx: "transform",
        jsxFactory: "h",
        jsxFragment: "Fragment",
        sourcefile: id,
        sourcemap: "inline"
      });
      let imports = [];
      if (/import/.test(jsCode)) {
        let [i] = eslexer.parse(jsCode);
        imports = i;
      }
      let importSource;
      if (imports.length > 0) {
        for (let { n: spec } of imports) {
          const pkg = spec && parseNpmName(spec);
          if (!pkg)
            continue;
          if (jsxRenderers.has(pkg.name)) {
            importSource = pkg.name;
            break;
          }
        }
      }
      if (!importSource) {
        const multiline = code.match(/\/\*\*[\S\s]*\*\//gm) || [];
        for (const comment of multiline) {
          const [_, lib] = comment.match(/@jsxImportSource\s*(\S+)/) || [];
          if (lib) {
            importSource = lib;
            break;
          }
        }
      }
      if (importSource) {
        const jsxRenderer = jsxRenderers.get(importSource);
        if (!jsxRenderer) {
          error(logging, "renderer", `${colors.yellow(id)} No renderer installed for ${importSource}. Try adding \`@astrojs/renderer-${importSource}\` to your dependencies.`);
          return null;
        }
        const { code: jsxCode } = await esbuild.transform(code, {
          loader: getEsbuildLoader(path.extname(id)),
          jsx: "preserve",
          sourcefile: id,
          sourcemap: "inline"
        });
        return await transformJSX({ code: jsxCode, id, renderer: jsxRenderers.get(importSource), mode, ssr });
      }
      const defaultRenderer = [...jsxRenderers.keys()][0];
      error(logging, "renderer", `${colors.yellow(id)}
Unable to resolve a renderer that handles this file! With more than one renderer enabled, you should include an import or use a pragma comment.
Add ${colors.cyan(IMPORT_STATEMENTS[defaultRenderer] || `import '${defaultRenderer}';`)} or ${colors.cyan(`/* jsxImportSource: ${defaultRenderer} */`)} to this file.
`);
      return null;
    }
  };
}
export {
  jsx as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWpzeC9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTSxxQkFBcUIsSUFBSTtBQUMvQixNQUFNLGlCQUFpQixJQUFJLElBQUksQ0FBQyxRQUFRO0FBQ3hDLE1BQU0sb0JBQTRDO0FBQUEsRUFDakQsT0FBTztBQUFBLEVBQ1AsUUFBUTtBQUFBLEVBQ1IsWUFBWTtBQUFBO0FBTWIsTUFBTSx5QkFBeUI7QUFFL0IsMEJBQTBCLFNBQXlCO0FBQ2xELFNBQU8sUUFBUSxPQUFPO0FBQUE7QUFHdkIsa0NBQWtDLGVBQXlEO0FBQzFGLFFBQU0sWUFBWSxJQUFJO0FBQ3RCLFFBQU0sUUFBUSxJQUNiLGNBQWMsSUFBSSxDQUFDLFNBQ2xCLE9BQU8sTUFBTSxLQUFLLENBQUMsRUFBRSxTQUFTLGVBQWU7QUFDNUMsUUFBSSxDQUFDLFNBQVM7QUFBaUI7QUFDL0IsY0FBVSxJQUFJLFNBQVMsaUJBQWlCO0FBQUE7QUFJM0MsU0FBTztBQUFBO0FBV1IsNEJBQTRCLEVBQUUsTUFBTSxNQUFNLElBQUksS0FBSyxZQUEyRDtBQUM3RyxRQUFNLEVBQUUsd0JBQXdCO0FBQ2hDLFFBQU0sVUFBVSxNQUFNLG9CQUFxQixFQUFFLE1BQU07QUFDbkQsUUFBTSxVQUFVLENBQUMsR0FBSSxRQUFRLFdBQVc7QUFDeEMsUUFBTSxTQUFTLE1BQU0sTUFBTSxlQUFlLE1BQU07QUFBQSxJQUMvQyxTQUFTLFFBQVE7QUFBQSxJQUNqQjtBQUFBLElBQ0EsS0FBSyxRQUFRO0FBQUEsSUFDYixVQUFVO0FBQUEsSUFDVixLQUFLO0FBQUEsSUFDTCxTQUFTO0FBQUEsSUFDVCxZQUFZO0FBQUEsSUFDWixZQUFZO0FBQUEsSUFDWixTQUFTO0FBQUE7QUFJVixNQUFJLENBQUM7QUFBUSxXQUFPO0FBQ3BCLFNBQU87QUFBQSxJQUNOLE1BQU0sT0FBTyxRQUFRO0FBQUEsSUFDckIs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
