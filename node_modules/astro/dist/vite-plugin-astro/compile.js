import fs from "fs";
import { fileURLToPath } from "url";
import { transform } from "@astrojs/compiler";
import { transformWithVite } from "./styles.js";
function createImportPlaceholder(spec) {
  return `/*IMPORT:${spec}*/`;
}
function safelyReplaceImportPlaceholder(code) {
  return code.replace(/\/\*IMPORT\:(.*?)\*\//g, `@import '$1';`);
}
const configCache = new WeakMap();
async function compile(config, filename, source, viteTransform, opts) {
  const filenameURL = new URL(`file://${filename}`);
  const normalizedID = fileURLToPath(filenameURL);
  const isPage = normalizedID.startsWith(fileURLToPath(config.pages)) || normalizedID.startsWith(fileURLToPath(config.layouts));
  const pathname = filenameURL.pathname.substr(config.projectRoot.pathname.length - 1);
  let rawCSSDeps = new Set();
  let cssTransformError;
  const transformResult = await transform(source, {
    as: isPage ? "document" : "fragment",
    pathname,
    projectRoot: config.projectRoot.toString(),
    site: config.buildOptions.site,
    sourcefile: filename,
    sourcemap: "both",
    internalURL: "astro/internal",
    experimentalStaticExtraction: config.buildOptions.experimentalStaticBuild,
    preprocessStyle: async (value, attrs) => {
      const lang = `.${(attrs == null ? void 0 : attrs.lang) || "css"}`.toLowerCase();
      try {
        if (config.buildOptions.experimentalStaticBuild) {
          value = value.replace(/(?:@import)\s(?:url\()?\s?["\'](.*?)["\']\s?\)?(?:[^;]*);?/gi, (match, spec) => {
            rawCSSDeps.add(spec);
            if (lang === ".css") {
              return createImportPlaceholder(spec);
            } else {
              return match;
            }
          });
        }
        const result = await transformWithVite({
          value,
          lang,
          id: normalizedID,
          transformHook: viteTransform,
          ssr: opts.ssr
        });
        let map;
        if (!result)
          return null;
        if (result.map) {
          if (typeof result.map === "string") {
            map = result.map;
          } else if (result.map.mappings) {
            map = result.map.toString();
          }
        }
        const code = safelyReplaceImportPlaceholder(result.code);
        return { code, map };
      } catch (err) {
        cssTransformError = err;
        return null;
      }
    }
  });
  if (cssTransformError)
    throw cssTransformError;
  const compileResult = Object.create(transformResult, {
    rawCSSDeps: {
      value: rawCSSDeps
    }
  });
  return compileResult;
}
function isCached(config, filename) {
  return configCache.has(config) && configCache.get(config).has(filename);
}
function invalidateCompilation(config, filename) {
  if (configCache.has(config)) {
    const cache = configCache.get(config);
    cache.delete(filename);
  }
}
async function cachedCompilation(config, filename, source, viteTransform, opts) {
  let cache;
  if (!configCache.has(config)) {
    cache = new Map();
    configCache.set(config, cache);
  } else {
    cache = configCache.get(config);
  }
  if (cache.has(filename)) {
    return cache.get(filename);
  }
  if (source === null) {
    const fileUrl = new URL(`file://${filename}`);
    source = await fs.promises.readFile(fileUrl, "utf-8");
  }
  const compileResult = await compile(config, filename, source, viteTransform, opts);
  cache.set(filename, compileResult);
  return compileResult;
}
export {
  cachedCompilation,
  invalidateCompilation,
  isCached
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWFzdHJvL2NvbXBpbGUudHMiXSwKICAibWFwcGluZ3MiOiAiQUFLQTtBQUNBO0FBQ0E7QUFDQTtBQWNBLGlDQUFpQyxNQUFjO0FBSTlDLFNBQU8sWUFBWTtBQUFBO0FBRXBCLHdDQUF3QyxNQUFjO0FBQ3JELFNBQU8sS0FBSyxRQUFRLDBCQUEwQjtBQUFBO0FBRy9DLE1BQU0sY0FBYyxJQUFJO0FBRXhCLHVCQUF1QixRQUFxQixVQUFrQixRQUFnQixlQUE4QixNQUFnRDtBQUczSixRQUFNLGNBQWMsSUFBSSxJQUFJLFVBQVU7QUFDdEMsUUFBTSxlQUFlLGNBQWM7QUFDbkMsUUFBTSxTQUFTLGFBQWEsV0FBVyxjQUFjLE9BQU8sV0FBVyxhQUFhLFdBQVcsY0FBYyxPQUFPO0FBQ3BILFFBQU0sV0FBVyxZQUFZLFNBQVMsT0FBTyxPQUFPLFlBQVksU0FBUyxTQUFTO0FBRWxGLE1BQUksYUFBYSxJQUFJO0FBQ3JCLE1BQUk7QUFLSixRQUFNLGtCQUFrQixNQUFNLFVBQVUsUUFBUTtBQUFBLElBQy9DLElBQUksU0FBUyxhQUFhO0FBQUEsSUFDMUI7QUFBQSxJQUNBLGFBQWEsT0FBTyxZQUFZO0FBQUEsSUFDaEMsTUFBTSxPQUFPLGFBQWE7QUFBQSxJQUMxQixZQUFZO0FBQUEsSUFDWixXQUFXO0FBQUEsSUFDWCxhQUFhO0FBQUEsSUFDYiw4QkFBOEIsT0FBTyxhQUFhO0FBQUEsSUFFbEQsaUJBQWlCLE9BQU8sT0FBZSxVQUFrQztBQUN4RSxZQUFNLE9BQU8sSUFBSSxnQ0FBTyxTQUFRLFFBQVE7QUFFeEMsVUFBSTtBQUVILFlBQUksT0FBTyxhQUFhLHlCQUF5QjtBQUNoRCxrQkFBUSxNQUFNLFFBQVEsZ0VBQWdFLENBQUMsT0FBTyxTQUFTO0FBQ3RHLHVCQUFXLElBQUk7QUFHZixnQkFBSSxTQUFTLFFBQVE7QUFDcEIscUJBQU8sd0JBQXdCO0FBQUEsbUJBQ3pCO0FBQ04scUJBQU87QUFBQTtBQUFBO0FBQUE7QUFLVixjQUFNLFNBQVMsTUFBTSxrQkFBa0I7QUFBQSxVQUN0QztBQUFBLFVBQ0E7QUFBQSxVQUNBLElBQUk7QUFBQSxVQUNKLGVBQWU7QUFBQSxVQUNmLEtBQUssS0FBSztBQUFBO0FBR1gsWUFBSTtBQUNKLFlBQUksQ0FBQztBQUFRLGlCQUFPO0FBQ3BCLFlBQUksT0FBTyxLQUFLO0FBQ2YsY0FBSSxPQUFPLE9BQU8sUUFBUSxVQUFVO0FBQ25DLGtCQUFNLE9BQU87QUFBQSxxQkFDSCxPQUFPLElBQUksVUFBVTtBQUMvQixrQkFBTSxPQUFPLElBQUk7QUFBQTtBQUFBO0FBR25CLGNBQU0sT0FBTywrQkFBK0IsT0FBTztBQUNuRCxlQUFPLEVBQUUsTUFBTTtBQUFBLGVBQ1AsS0FBUDtBQUVELDRCQUFvQjtBQUNwQixlQUFPO0FBQUE7QUFBQTtBQUFBO0FBTVYsTUFBSTtBQUFtQixVQUFNO0FBRTdCLFFBQU0sZ0JBQStCLE9BQU8sT0FBTyxpQkFBaUI7QUFBQSxJQUNuRSxZQUFZO0FBQUEsTUFDWCxPQUFPO0FBQUE7QUFBQTtBQUlULFNBQU87QUFBQTtBQUdELGtCQUFrQixRQUFxQixVQUFrQjtBQUMvRCxTQUFPLFlBQVksSUFBSSxXQUFXLFlBQVksSUFBSSxRQUFTLElBQUk7QUFBQTtBQUd6RCwrQkFBK0IsUUFBcUIsVUFBa0I7QUFDNUUsTUFBSSxZQUFZLElBQUksU0FBUztBQUM1QixVQUFNLFFBQVEsWUFBWSxJQUFJO0FBQzlCLFVBQU0sT0FBTztBQUFBO0FBQUE7QUFJZixpQ0FDQyxRQUNBLFVBQ0EsUUFDQSxlQUNBLE1BQ3lCO0FBQ3pCLE1BQUk7QUFDSixNQUFJLENBQUMsWUFBWSxJQUFJLFNBQVM7QUFDN0IsWUFBUSxJQUFJO0FBQ1osZ0JBQVksSUFBSSxRQUFRO0FBQUEsU0FDbEI7QUFDTixZQUFRLFlBQVksSUFBSTtBQUFBO0FBRXpCLE1BQUksTUFBTSxJQUFJLFdBQVc7QUFDeEIsV0FBTyxNQUFNLElBQUk7QUFBQTtBQUdsQixNQUFJLFdBQVcsTUFBTTtBQUNwQixVQUFNLFVBQVUsSUFBSSxJQUFJLFVBQVU7QUFDbEMsYUFBUyxNQUFNLEdBQUcsU0FBUyxTQUFTLFNBQVM7QUFBQTtBQUU5QyxRQUFNLGdCQUFnQixNQUFNLFFBQVEsUUFBUSxVQUFVLFFBQVEsZUFBZTtBQUM3RSxRQUFNLElBQUksVUFBVTtBQUNwQixTQUFPO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
