import { invalidateCompilation, isCached } from "./compile.js";
import { logger } from "../core/logger.js";
import { green } from "kleur/colors";
async function trackCSSDependencies(opts) {
  const { viteDevServer, filename, deps, id } = opts;
  if (viteDevServer) {
    const mod = viteDevServer.moduleGraph.getModuleById(id);
    if (mod) {
      const cssDeps = (await Promise.all(Array.from(deps).map((spec) => {
        return this.resolve(spec, id);
      }))).filter(Boolean).map((dep) => dep.id);
      const { moduleGraph } = viteDevServer;
      const depModules = new Set(mod.importedModules);
      for (const dep of cssDeps) {
        depModules.add(moduleGraph.createFileOnlyEntry(dep));
      }
      moduleGraph.updateModuleInfo(mod, depModules, new Set(), true);
      for (const dep of cssDeps) {
        this.addWatchFile(dep);
      }
    }
  }
}
function handleHotUpdate(ctx, config, logging) {
  var _a;
  invalidateCompilation(config, ctx.file);
  const filtered = new Set(ctx.modules);
  const files = new Set();
  for (const mod of ctx.modules) {
    if ((_a = mod.id) == null ? void 0 : _a.endsWith(".astro?html-proxy&index=0.js")) {
      filtered.delete(mod);
      continue;
    }
    if (mod.file && isCached(config, mod.file)) {
      filtered.add(mod);
      files.add(mod.file);
    }
    for (const imp of mod.importers) {
      if (imp.file && isCached(config, imp.file)) {
        filtered.add(imp);
        files.add(imp.file);
      }
    }
  }
  for (const file of files) {
    invalidateCompilation(config, file);
  }
  if (ctx.file.endsWith(".astro")) {
    const file = ctx.file.replace(config.projectRoot.pathname, "/");
    logger.info("astro", green("hmr"), `${file}`);
    ctx.server.ws.send({ type: "custom", event: "astro:update", data: { file } });
  }
  return Array.from(filtered);
}
export {
  handleHotUpdate,
  trackCSSDependencies
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWFzdHJvL2htci50cyJdLAogICJtYXBwaW5ncyI6ICJBQUlBO0FBQ0E7QUFDQTtBQVNBLG9DQUFzRSxNQUFrRDtBQUN2SCxRQUFNLEVBQUUsZUFBZSxVQUFVLE1BQU0sT0FBTztBQUU5QyxNQUFJLGVBQWU7QUFDbEIsVUFBTSxNQUFNLGNBQWMsWUFBWSxjQUFjO0FBQ3BELFFBQUksS0FBSztBQUNSLFlBQU0sVUFDTCxPQUFNLFFBQVEsSUFDYixNQUFNLEtBQUssTUFBTSxJQUFJLENBQUMsU0FBUztBQUM5QixlQUFPLEtBQUssUUFBUSxNQUFNO0FBQUEsV0FJM0IsT0FBTyxTQUNQLElBQUksQ0FBQyxRQUFTLElBQW1CO0FBRW5DLFlBQU0sRUFBRSxnQkFBZ0I7QUFHeEIsWUFBTSxhQUFhLElBQUksSUFBSSxJQUFJO0FBQy9CLGlCQUFXLE9BQU8sU0FBUztBQUMxQixtQkFBVyxJQUFJLFlBQVksb0JBQW9CO0FBQUE7QUFJaEQsa0JBQVksaUJBQWlCLEtBQUssWUFBWSxJQUFJLE9BQU87QUFDekQsaUJBQVcsT0FBTyxTQUFTO0FBQzFCLGFBQUssYUFBYTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTWYseUJBQXlCLEtBQWlCLFFBQXFCLFNBQXFCO0FBaEQzRjtBQWtEQyx3QkFBc0IsUUFBUSxJQUFJO0FBSWxDLFFBQU0sV0FBVyxJQUFJLElBQWdCLElBQUk7QUFDekMsUUFBTSxRQUFRLElBQUk7QUFDbEIsYUFBVyxPQUFPLElBQUksU0FBUztBQUc5QixRQUFJLFVBQUksT0FBSixtQkFBUSxTQUFTLGlDQUFpQztBQUNyRCxlQUFTLE9BQU87QUFDaEI7QUFBQTtBQUVELFFBQUksSUFBSSxRQUFRLFNBQVMsUUFBUSxJQUFJLE9BQU87QUFDM0MsZUFBUyxJQUFJO0FBQ2IsWUFBTSxJQUFJLElBQUk7QUFBQTtBQUVmLGVBQVcsT0FBTyxJQUFJLFdBQVc7QUFDaEMsVUFBSSxJQUFJLFFBQVEsU0FBUyxRQUFRLElBQUksT0FBTztBQUMzQyxpQkFBUyxJQUFJO0FBQ2IsY0FBTSxJQUFJLElBQUk7QUFBQTtBQUFBO0FBQUE7QUFPakIsYUFBVyxRQUFRLE9BQU87QUFDekIsMEJBQXNCLFFBQVE7QUFBQTtBQUcvQixNQUFJLElBQUksS0FBSyxTQUFTLFdBQVc7QUFDaEMsVUFBTSxPQUFPLElBQUksS0FBSyxRQUFRLE9BQU8sWUFBWSxVQUFVO0FBQzNELFdBQU8sS0FBSyxTQUFTLE1BQU0sUUFBUSxHQUFHO0FBQ3RDLFFBQUksT0FBTyxHQUFHLEtBQUssRUFBRSxNQUFNLFVBQVUsT0FBTyxnQkFBZ0IsTUFBTSxFQUFFO0FBQUE7QUFHckUsU0FBTyxNQUFNLEtBQUs7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
