import npath from "path";
import { findElements, getTagName, getAttribute, findNodes, hasAttribute } from "@web/parse5-utils";
import adapter from "parse5/lib/tree-adapters/default.js";
const hashedLinkRels = ["stylesheet", "preload"];
const linkRels = [...hashedLinkRels, "icon", "manifest", "apple-touch-icon", "mask-icon"];
const windowsPathRE = /^[A-Z]:\//;
function getSrcSetUrls(srcset) {
  if (!srcset) {
    return [];
  }
  const srcsetParts = srcset.includes(",") ? srcset.split(",") : [srcset];
  const urls = srcsetParts.map((url) => url.trim()).map((url) => url.includes(" ") ? url.split(" ")[0] : url);
  return urls;
}
function extractFirstUrlOfSrcSet(node) {
  const srcset = getAttribute(node, "srcset");
  if (!srcset) {
    return "";
  }
  const urls = getSrcSetUrls(srcset);
  return urls[0];
}
function isAsset(node) {
  var _a, _b, _c, _d, _e, _f;
  let path = "";
  switch (getTagName(node)) {
    case "img":
      path = (_a = getAttribute(node, "src")) != null ? _a : "";
      break;
    case "source":
      path = (_b = extractFirstUrlOfSrcSet(node)) != null ? _b : "";
      break;
    case "link":
      if (linkRels.includes((_c = getAttribute(node, "rel")) != null ? _c : "")) {
        path = (_d = getAttribute(node, "href")) != null ? _d : "";
      }
      break;
    case "meta":
      if (getAttribute(node, "property") === "og:image" && getAttribute(node, "content")) {
        path = (_e = getAttribute(node, "content")) != null ? _e : "";
      }
      break;
    case "script":
      if (getAttribute(node, "type") !== "module" && getAttribute(node, "src")) {
        path = (_f = getAttribute(node, "src")) != null ? _f : "";
      }
      break;
    default:
      return false;
  }
  if (!path) {
    return false;
  }
  if (windowsPathRE.test(path)) {
    return true;
  }
  try {
    new URL(path);
    return false;
  } catch (e) {
    return true;
  }
}
function isInlineScript(node) {
  switch (getTagName(node)) {
    case "script":
      if (getAttribute(node, "type") === "module" && !getAttribute(node, "src")) {
        return true;
      }
      return false;
    default:
      return false;
  }
}
function isExternalScript(node) {
  switch (getTagName(node)) {
    case "script":
      if (hasAttribute(node, "src")) {
        return true;
      }
      return false;
    default:
      return false;
  }
}
function isInlineStyle(node) {
  return getTagName(node) === "style";
}
function isStylesheetLink(node) {
  return getTagName(node) === "link" && getAttribute(node, "rel") === "stylesheet";
}
function isHashedAsset(node) {
  switch (getTagName(node)) {
    case "img":
      return true;
    case "source":
      return true;
    case "script":
      return true;
    case "link":
      return hashedLinkRels.includes(getAttribute(node, "rel"));
    case "meta":
      return true;
    default:
      return false;
  }
}
function resolveAssetFilePath(browserPath, htmlDir, projectRootDir, absolutePathPrefix) {
  const _browserPath = absolutePathPrefix && browserPath[0] === "/" ? "/" + npath.posix.relative(absolutePathPrefix, browserPath) : browserPath;
  return npath.join(_browserPath.startsWith("/") ? projectRootDir : htmlDir, _browserPath.split("/").join(npath.sep));
}
function getSourceAttribute(node) {
  switch (getTagName(node)) {
    case "img": {
      return "src";
    }
    case "source": {
      return "srcset";
    }
    case "link": {
      return "href";
    }
    case "script": {
      return "src";
    }
    case "meta": {
      return "content";
    }
    default:
      throw new Error(`Unknown node with tagname ${getTagName(node)}`);
  }
}
function getSourcePaths(node) {
  var _a;
  const key = getSourceAttribute(node);
  let location = { start: 0, end: 0 };
  const src = getAttribute(node, key);
  if (node.sourceCodeLocation) {
    let loc = (_a = node.sourceCodeLocation.attrs) == null ? void 0 : _a[key];
    if (loc) {
      location.start = loc.startOffset;
      location.end = loc.endOffset;
    }
  }
  if (typeof key !== "string" || src === "") {
    throw new Error(`Missing attribute ${key} in element ${node.nodeName}`);
  }
  let paths = [];
  if (src && key === "srcset") {
    paths = getSrcSetUrls(src).map((path) => ({
      path,
      location
    }));
  } else if (src) {
    paths.push({
      path: src,
      location
    });
  }
  return paths;
}
function getTextContent(node) {
  if (adapter.isCommentNode(node)) {
    return node.data || "";
  }
  if (adapter.isTextNode(node)) {
    return node.value || "";
  }
  const subtree = findNodes(node, (n) => adapter.isTextNode(n));
  return subtree.map(getTextContent).join("");
}
function getAttributes(node) {
  return Object.fromEntries(node.attrs.map((attr) => [attr.name, attr.value]));
}
function findAssets(document) {
  return findElements(document, isAsset);
}
function findInlineScripts(document) {
  return findElements(document, isInlineScript);
}
function findExternalScripts(document) {
  return findElements(document, isExternalScript);
}
function findInlineStyles(document) {
  return findElements(document, isInlineStyle);
}
function findStyleLinks(document) {
  return findElements(document, isStylesheetLink);
}
export {
  findAssets,
  findExternalScripts,
  findInlineScripts,
  findInlineStyles,
  findStyleLinks,
  getAttributes,
  getSourceAttribute,
  getSourcePaths,
  getTextContent,
  isHashedAsset,
  isStylesheetLink,
  resolveAssetFilePath
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWJ1aWxkLWh0bWwvZXh0cmFjdC1hc3NldHMudHMiXSwKICAibWFwcGluZ3MiOiAiQUFDQTtBQUNBO0FBQ0E7QUFFQSxNQUFNLGlCQUFpQixDQUFDLGNBQWM7QUFDdEMsTUFBTSxXQUFXLENBQUMsR0FBRyxnQkFBZ0IsUUFBUSxZQUFZLG9CQUFvQjtBQUM3RSxNQUFNLGdCQUFnQjtBQUV0Qix1QkFBdUIsUUFBZ0I7QUFDdEMsTUFBSSxDQUFDLFFBQVE7QUFDWixXQUFPO0FBQUE7QUFFUixRQUFNLGNBQWMsT0FBTyxTQUFTLE9BQU8sT0FBTyxNQUFNLE9BQU8sQ0FBQztBQUNoRSxRQUFNLE9BQU8sWUFBWSxJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsSUFBSSxDQUFDLFFBQVMsSUFBSSxTQUFTLE9BQU8sSUFBSSxNQUFNLEtBQUssS0FBSztBQUN4RyxTQUFPO0FBQUE7QUFHUixpQ0FBaUMsTUFBZTtBQUMvQyxRQUFNLFNBQVMsYUFBYSxNQUFNO0FBQ2xDLE1BQUksQ0FBQyxRQUFRO0FBQ1osV0FBTztBQUFBO0FBRVIsUUFBTSxPQUFPLGNBQWM7QUFDM0IsU0FBTyxLQUFLO0FBQUE7QUFHYixpQkFBaUIsTUFBZTtBQTNCaEM7QUE0QkMsTUFBSSxPQUFPO0FBQ1gsVUFBUSxXQUFXO0FBQUEsU0FDYjtBQUNKLGFBQU8sbUJBQWEsTUFBTSxXQUFuQixZQUE2QjtBQUNwQztBQUFBLFNBQ0k7QUFDSixhQUFPLDhCQUF3QixVQUF4QixZQUFpQztBQUN4QztBQUFBLFNBQ0k7QUFDSixVQUFJLFNBQVMsU0FBUyxtQkFBYSxNQUFNLFdBQW5CLFlBQTZCLEtBQUs7QUFDdkQsZUFBTyxtQkFBYSxNQUFNLFlBQW5CLFlBQThCO0FBQUE7QUFFdEM7QUFBQSxTQUNJO0FBQ0osVUFBSSxhQUFhLE1BQU0sZ0JBQWdCLGNBQWMsYUFBYSxNQUFNLFlBQVk7QUFDbkYsZUFBTyxtQkFBYSxNQUFNLGVBQW5CLFlBQWlDO0FBQUE7QUFF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
