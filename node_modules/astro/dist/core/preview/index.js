import http from "http";
import { performance } from "perf_hooks";
import send from "send";
import { fileURLToPath } from "url";
import fs from "fs";
import * as msg from "../messages.js";
import { error, info } from "../logger.js";
import { subpathNotUsedTemplate, notFoundTemplate } from "../../template/4xx.js";
import { trimSlashes } from "../path.js";
async function preview(config, { logging }) {
  const startServerTime = performance.now();
  const pageUrlFormat = config.buildOptions.pageUrlFormat;
  const trailingSlash = config.devOptions.trailingSlash;
  const forceTrailingSlash = trailingSlash === "always";
  const blockTrailingSlash = trailingSlash === "never";
  const defaultFile = "index.html";
  const defaultOrigin = "http://localhost";
  const sendOptions = {
    extensions: pageUrlFormat === "file" ? ["html"] : false,
    index: false,
    root: fileURLToPath(config.dist)
  };
  let baseURL = new URL(config.buildOptions.site || "/", defaultOrigin);
  const server = http.createServer((req, res) => {
    const requestURL = new URL(req.url, defaultOrigin);
    if (!requestURL.pathname.startsWith(baseURL.pathname)) {
      res.statusCode = 404;
      res.end(subpathNotUsedTemplate(baseURL.pathname, requestURL.pathname));
      return;
    }
    const pathname = requestURL.pathname.slice(baseURL.pathname.length - 1);
    const isRoot = pathname === "/";
    const hasTrailingSlash = isRoot || pathname.endsWith("/");
    let tryTrailingSlash = true;
    let tryHtmlExtension = true;
    let url;
    const onErr = (message) => {
      res.statusCode = 404;
      res.end(notFoundTemplate(pathname, message));
    };
    const onStat = (err, stat) => {
      switch (true) {
        case (err && tryHtmlExtension && hasTrailingSlash && !blockTrailingSlash):
        case (err && tryHtmlExtension && !hasTrailingSlash && !forceTrailingSlash && !pathname.endsWith(".html")):
          tryHtmlExtension = false;
          return fs.stat(url = new URL(url.pathname + ".html", url), onStat);
        case err !== null:
          return onErr("Path not found");
        case (stat.isDirectory() && hasTrailingSlash && blockTrailingSlash && !isRoot):
          return onErr("Prohibited trailing slash");
        case (stat.isDirectory() && !hasTrailingSlash && forceTrailingSlash && !isRoot):
          return onErr("Required trailing slash");
        case (stat.isDirectory() && tryTrailingSlash):
          tryTrailingSlash = false;
          return fs.stat(url = new URL(url.pathname + (url.pathname.endsWith("/") ? defaultFile : "/" + defaultFile), url), onStat);
        case stat.isDirectory():
          return onErr("Path not found");
        default:
          send(req, fileURLToPath(url), {
            extensions: false,
            index: false
          }).pipe(res);
      }
    };
    fs.stat(url = new URL(trimSlashes(pathname), config.dist), onStat);
  });
  let { hostname, port } = config.devOptions;
  let httpServer;
  function startServer(timerStart) {
    let showedPortTakenMsg = false;
    let showedListenMsg = false;
    return new Promise((resolve, reject) => {
      const listen = () => {
        httpServer = server.listen(port, hostname, () => {
          if (!showedListenMsg) {
            info(logging, "astro", msg.devStart({ startupTime: performance.now() - timerStart }));
            info(logging, "astro", msg.devHost({ address: { family: "ipv4", address: hostname, port }, https: false, site: baseURL }));
          }
          showedListenMsg = true;
          resolve();
        });
        httpServer == null ? void 0 : httpServer.on("error", onError);
      };
      const onError = (err) => {
        if (err.code && err.code === "EADDRINUSE") {
          if (!showedPortTakenMsg) {
            info(logging, "astro", msg.portInUse({ port }));
            showedPortTakenMsg = true;
          }
          port++;
          return listen();
        } else {
          error(logging, "astro", err.stack);
          httpServer == null ? void 0 : httpServer.removeListener("error", onError);
          reject(err);
        }
      };
      listen();
    });
  }
  await startServer(startServerTime);
  return {
    hostname,
    port,
    server: httpServer,
    stop: async () => {
      httpServer.close();
    }
  };
}
export {
  preview as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvcHJldmlldy9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWNBLHVCQUFzQyxRQUFxQixFQUFFLFdBQW1EO0FBQy9HLFFBQU0sa0JBQWtCLFlBQVk7QUFDcEMsUUFBTSxnQkFBZ0IsT0FBTyxhQUFhO0FBQzFDLFFBQU0sZ0JBQWdCLE9BQU8sV0FBVztBQUN4QyxRQUFNLHFCQUFxQixrQkFBa0I7QUFDN0MsUUFBTSxxQkFBcUIsa0JBQWtCO0FBRzdDLFFBQU0sY0FBYztBQUVwQixRQUFNLGdCQUFnQjtBQUV0QixRQUFNLGNBQWM7QUFBQSxJQUNuQixZQUFZLGtCQUFrQixTQUFTLENBQUMsVUFBVTtBQUFBLElBQ2xELE9BQU87QUFBQSxJQUNQLE1BQU0sY0FBYyxPQUFPO0FBQUE7QUFJNUIsTUFBSSxVQUFVLElBQUksSUFBSSxPQUFPLGFBQWEsUUFBUSxLQUFLO0FBR3ZELFFBQU0sU0FBUyxLQUFLLGFBQWEsQ0FBQyxLQUFLLFFBQVE7QUFDOUMsVUFBTSxhQUFhLElBQUksSUFBSSxJQUFJLEtBQWU7QUFHOUMsUUFBSSxDQUFDLFdBQVcsU0FBUyxXQUFXLFFBQVEsV0FBVztBQUN0RCxVQUFJLGFBQWE7QUFDakIsVUFBSSxJQUFJLHVCQUF1QixRQUFRLFVBQVUsV0FBVztBQUM1RDtBQUFBO0FBSUQsVUFBTSxXQUFXLFdBQVcsU0FBUyxNQUFNLFFBQVEsU0FBUyxTQUFTO0FBRXJFLFVBQU0sU0FBUyxhQUFhO0FBQzVCLFVBQU0sbUJBQW1CLFVBQVUsU0FBUyxTQUFTO0FBRXJELFFBQUksbUJBQW1CO0FBQ3ZCLFFBQUksbUJBQW1CO0FBRXZCLFFBQUk7QUFFSixVQUFNLFFBQVEsQ0FBQyxZQUFvQjtBQUNsQyxVQUFJLGFBQWE7QUFDakIsVUFBSSxJQUFJLGlCQUFpQixVQUFVO0FBQUE7QUFHcEMsVUFBTSxTQUFTLENBQUMsS0FBbUMsU0FBZ0I7QUFDbEUsY0FBUTtBQUFBLGFBRUYsUUFBTyxvQkFBb0Isb0JBQW9CLENBQUM7QUFBQSxhQUNoRCxRQUFPLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDLHNCQUFzQixDQUFDLFNBQVMsU0FBUztBQUM5Riw2QkFBbUI7QUFDbkIsaUJBQU8sR0FBRyxLQUFNLE1BQU0sSUFBSSxJQUFJLElBQUksV0FBVyxTQUFTLE1BQU87QUFBQSxhQUd6RCxRQUFRO0FBQ1osaUJBQU8sTUFBTTtBQUFBLGFBR1QsTUFBSyxpQkFBaUIsb0JBQW9CLHNCQUFzQixDQUFDO0FBQ3JFLGlCQUFPLE1BQU07QUFBQSxhQUdULE1BQUssaUJBQWlCLENBQUMsb0JBQW9CLHNCQUFzQixDQUFDO0FBQ3RFLGlCQUFPLE1BQU07QUFBQSxhQUdULE1BQUssaUJBQWlCO0FBQzFCLDZCQUFtQjtBQUNuQixpQkFBTyxHQUFHLEtBQU0sTUFBTSxJQUFJLElBQUksSUFBSSxXQUFZLEtBQUksU0FBUyxTQUFTLE9BQU8sY0FBYyxNQUFNLGNBQWMsTUFBTztBQUFBLGFBR2hILEtBQUs7QUFDVCxpQkFBTyxNQUFNO0FBQUE7QUFJYixlQUFLLEtBQUssY0FBYyxNQUFNO0FBQUEsWUFDN0IsWUFBWTtBQUFBLFlBQ1osT0FBTztBQUFBLGFBQ0wsS0FBSztBQUFBO0FBQUE7QUFJWCxPQUFHLEtBQU0sTUFBTSxJQUFJLElBQUksWUFBWSxXQUFXLE9BQU8sT0FBUTtBQUFBO0FBRzlELE1BQUksRUFBRSxVQUFVLFNBQVMsT0FBTztBQUVoQyxNQUFJO0FBR0osdUJBQXFCLFlBQW1DO0FBQ3ZELFFBQUkscUJBQXFCO0FBQ3pCLFFBQUksa0JBQWtCO0FBQ3RCLFdBQU8sSUFBSSxRQUFjLENBQUMsU0FBUyxXQUFXO0FBQzdDLFlBQU0sU0FBUyxNQUFNO0FBQ3BCLHFCQUFhLE9BQU8sT0FBTyxNQUFNLFVBQVUsTUFBTTtBQUNoRCxjQUFJLENBQUMsaUJBQWlCO0FBQ3JCLGlCQUFLLFNBQVMsU0FBUyxJQUFJLFNBQVMsRUFBRSxhQUFhLFlBQVksUUFBUTtBQUN2RSxpQkFBSyxTQUFTLFNBQVMsSUFBSSxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsUUFBUSxTQUFTLFVBQVUsUUFBUSxPQUFPLE9BQU8sTUFBTTtBQUFBO0FBRWhILDRCQUFrQjtBQUNsQjtBQUFBO0FBRUQsaURBQVksR0FBRyxTQUFTO0FBQUE7QUFHekIsWUFBTSxVQUFVLENBQUMsUUFBK0I7QUFDL0MsWUFBSSxJQUFJLFFBQVEsSUFBSSxTQUFTLGNBQWM7QUFDMUMsY0FBSSxDQUFDLG9CQUFvQjtBQUN4QixpQkFBSyxTQUFTLFNBQVMsSUFBSSxVQUFVLEVBQUU7QUFDdkMsaUNBQXFCO0FBQUE7QUFFdEI7QUFDQSxpQkFBTztBQUFBLGVBQ0Q7QUFDTixnQkFBTSxTQUFTLFNBQVMsSUFBSTtBQUM1QixtREFBWSxlQUFlLFNBQVM7QUFDcEMsaUJBQU87QUFBQTtBQUFBO0FBSVQ7QUFBQTtBQUFBO0FBS0YsUUFBTSxZQUFZO0FBRWxCLFNBQU87QUFBQSxJQUNOO0FBQUEsSUFDQTtBQUFBLElBQ0EsUUFBUTtBQUFBLElBQ1IsTUFBTSxZQUFZO0FBQ2pCLGlCQUFXO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
