import fs from "fs";
import * as colors from "kleur/colors";
import { polyfill } from "@astropub/webapi";
import { performance } from "perf_hooks";
import * as vite from "vite";
import { createVite } from "../create-vite.js";
import { debug, defaultLogOptions, info, levels, timerMessage, warn } from "../logger.js";
import { createRouteManifest } from "../routing/index.js";
import { generateSitemap } from "../render/sitemap.js";
import { collectPagesData } from "./page-data.js";
import { build as scanBasedBuild } from "./scan-based-build.js";
import { staticBuild } from "./static-build.js";
import { RouteCache } from "../render/route-cache.js";
async function build(config, options = { logging: defaultLogOptions }) {
  polyfill(globalThis, {
    exclude: "window document"
  });
  const builder = new AstroBuilder(config, options);
  await builder.build();
}
class AstroBuilder {
  constructor(config, options) {
    this.mode = "production";
    if (!config.buildOptions.site && config.buildOptions.sitemap !== false) {
      warn(options.logging, "config", `Set "buildOptions.site" to generate correct canonical URLs and sitemap`);
    }
    if (options.mode)
      this.mode = options.mode;
    this.config = config;
    const port = config.devOptions.port;
    this.logging = options.logging;
    this.routeCache = new RouteCache(this.logging);
    this.origin = config.buildOptions.site ? new URL(config.buildOptions.site).origin : `http://localhost:${port}`;
    this.manifest = createRouteManifest({ config }, this.logging);
  }
  async build() {
    const { logging, origin } = this;
    const timer = {};
    timer.init = performance.now();
    timer.viteStart = performance.now();
    const viteConfig = await createVite(vite.mergeConfig({
      mode: this.mode,
      server: {
        hmr: { overlay: false },
        middlewareMode: "ssr"
      }
    }, this.config.vite || {}), { astroConfig: this.config, logging, mode: "build" });
    this.viteConfig = viteConfig;
    const viteServer = await vite.createServer(viteConfig);
    this.viteServer = viteServer;
    debug("build", timerMessage("Vite started", timer.viteStart));
    timer.loadStart = performance.now();
    const { assets, allPages } = await collectPagesData({
      astroConfig: this.config,
      logging: this.logging,
      manifest: this.manifest,
      origin,
      routeCache: this.routeCache,
      viteServer: this.viteServer
    });
    Object.entries(allPages).forEach(([page, data]) => {
      if ("frontmatter" in data.preload[1]) {
        const frontmatter = data.preload[1].frontmatter;
        if (Boolean(frontmatter.draft) && !this.config.buildOptions.drafts) {
          debug("build", timerMessage(`Skipping draft page ${page}`, timer.loadStart));
          delete allPages[page];
        }
      }
    });
    debug("build", timerMessage("All pages loaded", timer.loadStart));
    const pageNames = [];
    timer.buildStart = performance.now();
    if (this.config.buildOptions.experimentalStaticBuild) {
      await staticBuild({
        allPages,
        astroConfig: this.config,
        logging: this.logging,
        manifest: this.manifest,
        origin: this.origin,
        pageNames,
        routeCache: this.routeCache,
        viteConfig: this.viteConfig
      });
    } else {
      await scanBasedBuild({
        allPages,
        astroConfig: this.config,
        logging: this.logging,
        origin: this.origin,
        pageNames,
        routeCache: this.routeCache,
        viteConfig: this.viteConfig,
        viteServer: this.viteServer
      });
    }
    debug("build", timerMessage("Vite build finished", timer.buildStart));
    timer.assetsStart = performance.now();
    Object.keys(assets).map((k) => {
      if (!assets[k])
        return;
      const filePath = new URL(`file://${k}`);
      fs.mkdirSync(new URL("./", filePath), { recursive: true });
      fs.writeFileSync(filePath, assets[k], "utf8");
      delete assets[k];
    });
    debug("build", timerMessage("Additional assets copied", timer.assetsStart));
    if (this.config.buildOptions.sitemap && this.config.buildOptions.site) {
      timer.sitemapStart = performance.now();
      const sitemap = generateSitemap(pageNames.map((pageName) => new URL(pageName, this.config.buildOptions.site).href));
      const sitemapPath = new URL("./sitemap.xml", this.config.dist);
      await fs.promises.mkdir(new URL("./", sitemapPath), { recursive: true });
      await fs.promises.writeFile(sitemapPath, sitemap, "utf8");
      debug("build", timerMessage("Sitemap built", timer.sitemapStart));
    }
    await viteServer.close();
    if (logging.level && levels[logging.level] <= levels["info"]) {
      await this.printStats({ logging, timeStart: timer.init, pageCount: pageNames.length });
    }
  }
  async printStats({ logging, timeStart, pageCount }) {
    const buildTime = performance.now() - timeStart;
    const total = buildTime < 750 ? `${Math.round(buildTime)}ms` : `${(buildTime / 1e3).toFixed(2)}s`;
    const perPage = `${Math.round(buildTime / pageCount)}ms`;
    info(logging, "build", `${pageCount} pages built in ${colors.bold(total)} ${colors.dim(`(${perPage}/page)`)}`);
    info(logging, "build", `\u{1F680} ${colors.cyan(colors.bold("Done"))}`);
  }
}
export {
  build as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvYnVpbGQvaW5kZXgudHMiXSwKICAibWFwcGluZ3MiOiAiQUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBLHFCQUFvQyxRQUFxQixVQUF3QixFQUFFLFNBQVMscUJBQW9DO0FBRS9ILFdBQVMsWUFBWTtBQUFBLElBQ3BCLFNBQVM7QUFBQTtBQUdWLFFBQU0sVUFBVSxJQUFJLGFBQWEsUUFBUTtBQUN6QyxRQUFNLFFBQVE7QUFBQTtBQUdmLG1CQUFtQjtBQUFBLEVBVWxCLFlBQVksUUFBcUIsU0FBdUI7QUFQaEQsZ0JBQU87QUFRZCxRQUFJLENBQUMsT0FBTyxhQUFhLFFBQVEsT0FBTyxhQUFhLFlBQVksT0FBTztBQUN2RSxXQUFLLFFBQVEsU0FBUyxVQUFVO0FBQUE7QUFHakMsUUFBSSxRQUFRO0FBQU0sV0FBSyxPQUFPLFFBQVE7QUFDdEMsU0FBSyxTQUFTO0FBQ2QsVUFBTSxPQUFPLE9BQU8sV0FBVztBQUMvQixTQUFLLFVBQVUsUUFBUTtBQUN2QixTQUFLLGFBQWEsSUFBSSxXQUFXLEtBQUs7QUFDdEMsU0FBSyxTQUFTLE9BQU8sYUFBYSxPQUFPLElBQUksSUFBSSxPQUFPLGFBQWEsTUFBTSxTQUFTLG9CQUFvQjtBQUN4RyxTQUFLLFdBQVcsb0JBQW9CLEVBQUUsVUFBVSxLQUFLO0FBQUE7QUFBQSxRQUdoRCxRQUFRO0FBQ2IsVUFBTSxFQUFFLFNBQVMsV0FBVztBQUM1QixVQUFNLFFBQWdDO0FBQ3RDLFVBQU0sT0FBTyxZQUFZO0FBQ3pCLFVBQU0sWUFBWSxZQUFZO0FBQzlCLFVBQU0sYUFBYSxNQUFNLFdBQ3hCLEtBQUssWUFDSjtBQUFBLE1BQ0MsTUFBTSxLQUFLO0FBQUEsTUFDWCxRQUFRO0FBQUEsUUFDUCxLQUFLLEVBQUUsU0FBUztBQUFBLFFBQ2hCLGdCQUFnQjtBQUFBO0FBQUEsT0FHbEIsS0FBSyxPQUFPLFFBQVEsS0FFckIsRUFBRSxhQUFhLEtBQUssUUFBUSxTQUFTLE1BQU07QUFFNUMsU0FBSyxhQUFhO0FBQ2xCLFVBQU0sYUFBYSxNQUFNLEtBQUssYUFBYTtBQUMzQyxTQUFLLGFBQWE7QUFDbEIsVUFBTSxTQUFTLGFBQWEsZ0JBQWdCLE1BQU07QUFFbEQsVUFBTSxZQUFZLFlBQVk7QUFDOUIsVUFBTSxFQUFFLFFBQVEsYUFBYSxNQUFNLGlCQUFpQjtBQUFBLE1BQ25ELGFBQWEsS0FBSztBQUFBLE1BQ2xCLFNBQVMsS0FBSztBQUFBLE1BQ2QsVUFBVSxLQUFLO0FBQUEsTUFDZjtBQUFBLE1BQ0EsWUFBWSxLQUFLO0FBQUEsTUFDakIsWUFBWSxLQUFLO0FBQUE7QUFJbEIsV0FBTyxRQUFRLFVBQVUsUUFBUSxDQUFDLENBQUMsTUFBTSxVQUFVO0FBQ2xELFVBQUksaUJBQWlCLEtBQUssUUFBUSxJQUFJO0FBRXJDLGNBQU0sY0FBZSxLQUFLLFFBQVEsR0FBVztBQUM3QyxZQUFJLFFBQVEsWUFBWSxVQUFVLENBQUMsS0FBSyxPQUFPLGFBQWEsUUFBUTtBQUNuRSxnQkFBTSxTQUFTLGFBQWEsdUJBQXVCLFFBQVEsTUFBTTtBQUNqRSxpQkFBTyxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBS25CLFVBQU0sU0FBUyxhQUFhLG9CQUFvQixNQUFNO0FBR3RELFVBQU0sWUFBc0I7QUFJNUIsVUFBTSxhQUFhLFlBQVk7QUFHL0IsUUFBSSxLQUFLLE9BQU8sYUFBYSx5QkFBeUI7QUFDckQsWUFBTSxZQUFZO0FBQUEsUUFDakI7QUFBQSxRQUNBLGFBQWEsS0FBSztBQUFBLFFBQ2xCLFNBQVMsS0FBSztBQUFBLFFBQ2QsVUFBVSxLQUFLO0FBQUEsUUFDZixRQUFRLEtBQUs7QUFBQSxRQUNiO0FBQUEsUUFDQSxZQUFZLEtBQUs7QUFBQSxRQUNqQixZQUFZLEtBQUs7QUFBQTtBQUFBLFdBRVo7QUFDTixZQUFNLGVBQWU7QUFBQSxRQUNwQjtBQUFBLFFBQ0EsYUFBYSxLQUFLO0FBQUEsUUFDbEIsU0FBUyxLQUFLO0FBQUEsUUFDZCxRQUFRLEtBQUs7QUFBQSxRQUNiO0FBQUEsUUFDQSxZQUFZLEtBQUs7QUFBQSxRQUNqQixZQUFZLEtBQUs7QUFBQSxRQUNqQixZQUFZLEtBQUs7QUFBQTtBQUFBO0FBR25CLFVBQU0sU0FBUyxhQUFhLHVCQUF1QixNQUFNO0FBR3pELFVBQU0sY0FBYyxZQUFZO0FBQ2hDLFdBQU8sS0FBSyxRQUFRLElBQUksQ0FBQyxNQUFNO0FBQzlCLFVBQUksQ0FBQyxPQUFPO0FBQUk7QUFDaEIsWUFBTSxXQUFXLElBQUksSUFBSSxVQUFVO0FBQ25DLFNBQUcsVUFBVSxJQUFJLElBQUksTUFBTSxXQUFXLEVBQUUsV0FBVztBQUNuRCxTQUFHLGNBQWMsVUFBVSxPQUFPLElBQUk7QUFDdEMsYUFBTyxPQUFPO0FBQUE7QUFFZixVQUFNLFNBQVMsYUFBYSw0QkFBNEIsTUFBTTtBQUc5RCxRQUFJLEtBQUssT0FBTyxhQUFhLFdBQVcsS0FBSyxPQUFPLGFBQWEsTUFBTTtBQUN0RSxZQUFNLGVBQWUsWUFBWTtBQUNqQyxZQUFNLFVBQVUsZ0JBQWdCLFVBQVUsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLFVBQVUsS0FBSyxPQUFPLGFBQWEsTUFBTTtBQUM3RyxZQUFNLGNBQWMsSUFBSSxJQUFJLGlCQUFpQixLQUFLLE9BQU87QUFDekQsWUFBTSxHQUFHLFNBQVMsTUFBTSxJQUFJLElBQUksTUFBTSxjQUFjLEVBQUUsV0FBVztBQUNqRSxZQUFNLEdBQUcsU0FBUyxVQUFVLGFBQWEsU0FBUztBQUNsRCxZQUFNLFNBQVMsYUFBYSxpQkFBaUIsTUFBTTtBQUFBO0FBSXBELFVBQU0sV0FBVztBQUNqQixRQUFJLFFBQVEsU0FBUyxPQUFPLFFBQVEsVUFBVSxPQUFPLFNBQVM7QUFDN0QsWUFBTSxLQUFLLFdBQVcsRUFBRSxTQUFTLFdBQVcsTUFBTSxNQUFNLFdBQVcsVUFBVTtBQUFBO0FBQUE7QUFBQSxRQUtqRSxXQUFXLEVBQUUsU0FBUyxXQUFXLGFBQTRFO0FBQzFILFVBQU0sWUFBWSxZQUFZLFFBQVE7QUFDdEMsVUFBTSxRQUFRLFlBQVksTUFBTSxHQUFHLEtBQUssTUFBTSxpQkFBaUIsR0FBSSxhQUFZLEtBQU0sUUFBUTtBQUM3RixVQUFNLFVBQVUsR0FBRyxLQUFLLE1BQU0sWUFBWTtBQUMxQyxTQUFLLFNBQVMsU0FBUyxHQUFHLDRCQUE0QixPQUFPLEtBQUssVUFBVSxPQUFPLElBQUksSUFBSTtBQUMzRixTQUFLLFNBQVMsU0FBUyxhQUFNLE9BQU8sS0FBSyxPQUFPLEtBQUs7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
