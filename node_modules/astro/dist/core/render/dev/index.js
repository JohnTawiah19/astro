import { fileURLToPath } from "url";
import { getStylesForURL } from "./css.js";
import { injectTags } from "./html.js";
import { resolveRenderers } from "./renderers.js";
import { errorHandler } from "./error.js";
import { getHmrScript } from "./hmr.js";
import { render as coreRender } from "../core.js";
import { createModuleScriptElementWithSrcSet } from "../ssr-element.js";
const svelteStylesRE = /svelte\?svelte&type=style/;
async function preload({ astroConfig, filePath, viteServer }) {
  const renderers = await resolveRenderers(viteServer, astroConfig);
  const mod = await viteServer.ssrLoadModule(fileURLToPath(filePath));
  return [renderers, mod];
}
async function render(renderers, mod, ssrOpts) {
  const { astroConfig, filePath, logging, mode, origin, pathname, route, routeCache, viteServer } = ssrOpts;
  const scripts = createModuleScriptElementWithSrcSet(astroConfig.buildOptions.experimentalStaticBuild && mod.hasOwnProperty("$$metadata") ? Array.from(mod.$$metadata.hoistedScriptPaths()) : []);
  if (mod.hasOwnProperty("$$metadata") && mode === "development" && astroConfig.buildOptions.experimentalStaticBuild) {
    scripts.add({
      props: { type: "module", src: "/@vite/client" },
      children: ""
    });
    scripts.add({
      props: { type: "module", src: new URL("../../../runtime/client/hmr.js", import.meta.url).pathname },
      children: ""
    });
  }
  let content = await coreRender({
    experimentalStaticBuild: astroConfig.buildOptions.experimentalStaticBuild,
    links: new Set(),
    logging,
    markdownRender: astroConfig.markdownOptions.render,
    mod,
    origin,
    pathname,
    scripts,
    async resolve(s) {
      if (astroConfig.buildOptions.experimentalStaticBuild) {
        const [, resolvedPath] = await viteServer.moduleGraph.resolveUrl(s);
        return resolvedPath;
      } else {
        return s;
      }
    },
    renderers,
    route,
    routeCache,
    site: astroConfig.buildOptions.site
  });
  if ((route == null ? void 0 : route.type) === "endpoint") {
    return content;
  }
  const tags = [];
  if (mode === "development" && !astroConfig.buildOptions.experimentalStaticBuild) {
    tags.push({
      tag: "script",
      attrs: { type: "module" },
      children: await getHmrScript(),
      injectTo: "head"
    });
  }
  [...getStylesForURL(filePath, viteServer)].forEach((href) => {
    if (mode === "development" && svelteStylesRE.test(href)) {
      tags.push({
        tag: "script",
        attrs: { type: "module", src: href },
        injectTo: "head"
      });
    } else {
      tags.push({
        tag: "link",
        attrs: {
          rel: "stylesheet",
          href,
          "data-astro-injected": true
        },
        injectTo: "head"
      });
    }
  });
  content = injectTags(content, tags);
  if (mode === "development" && !astroConfig.buildOptions.experimentalStaticBuild) {
    const relativeURL = filePath.href.replace(astroConfig.projectRoot.href, "/");
    content = await viteServer.transformIndexHtml(relativeURL, content, pathname);
  }
  if (!/<!doctype html/i.test(content)) {
    content = "<!DOCTYPE html>\n" + content;
  }
  return content;
}
async function ssr(ssrOpts) {
  try {
    const [renderers, mod] = await preload(ssrOpts);
    return await render(renderers, mod, ssrOpts);
  } catch (e) {
    await errorHandler(e, { viteServer: ssrOpts.viteServer, filePath: ssrOpts.filePath });
    throw e;
  }
}
export {
  preload,
  render,
  ssr
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vc3JjL2NvcmUvcmVuZGVyL2Rldi9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF5QkEsTUFBTSxpQkFBaUI7QUFFdkIsdUJBQThCLEVBQUUsYUFBYSxVQUFVLGNBQXFEO0FBRTNHLFFBQU0sWUFBWSxNQUFNLGlCQUFpQixZQUFZO0FBRXJELFFBQU0sTUFBTyxNQUFNLFdBQVcsY0FBYyxjQUFjO0FBRTFELFNBQU8sQ0FBQyxXQUFXO0FBQUE7QUFJcEIsc0JBQTZCLFdBQXVCLEtBQXdCLFNBQXNDO0FBQ2pILFFBQU0sRUFBRSxhQUFhLFVBQVUsU0FBUyxNQUFNLFFBQVEsVUFBVSxPQUFPLFlBQVksZUFBZTtBQUdsRyxRQUFNLFVBQVUsb0NBQ2YsWUFBWSxhQUFhLDJCQUEyQixJQUFJLGVBQWUsZ0JBQWdCLE1BQU0sS0FBSyxJQUFJLFdBQVcsd0JBQXdCO0FBSTFJLE1BQUksSUFBSSxlQUFlLGlCQUFpQixTQUFTLGlCQUFpQixZQUFZLGFBQWEseUJBQXlCO0FBQ25ILFlBQVEsSUFBSTtBQUFBLE1BQ1gsT0FBTyxFQUFFLE1BQU0sVUFBVSxLQUFLO0FBQUEsTUFDOUIsVUFBVTtBQUFBO0FBRVgsWUFBUSxJQUFJO0FBQUEsTUFDWCxPQUFPLEVBQUUsTUFBTSxVQUFVLEtBQUssSUFBSSxJQUFJLGtDQUFrQyxZQUFZLEtBQUs7QUFBQSxNQUN6RixVQUFVO0FBQUE7QUFBQTtBQUlaLE1BQUksVUFBVSxNQUFNLFdBQVc7QUFBQSxJQUM5Qix5QkFBeUIsWUFBWSxhQUFhO0FBQUEsSUFDbEQsT0FBTyxJQUFJO0FBQUEsSUFDWDtBQUFBLElBQ0EsZ0JBQWdCLFlBQVksZ0JBQWdCO0FBQUEsSUFDNUM7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxVQUVNLFFBQVEsR0FBVztBQUl4QixVQUFJLFlBQVksYUFBYSx5QkFBeUI7QUFDckQsY0FBTSxDQUFDLEVBQUUsZ0JBQWdCLE1BQU0sV0FBVyxZQUFZLFdBQVc7QUFDakUsZUFBTztBQUFBLGFBQ0Q7QUFDTixlQUFPO0FBQUE7QUFBQTtBQUFBLElBR1Q7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0EsTUFBTSxZQUFZLGFBQWE7QUFBQTtBQUdoQyxNQUFJLGdDQUFPLFVBQVMsWUFBWTtBQUMvQixXQUFPO0FBQUE7QUFJUixRQUFNLE9BQWlDO0FBR3ZDLE1BQUksU0FBUyxpQkFBaUIsQ0FBQyxZQUFZLGFBQWEseUJBQXlCO0FBQ2hGLFNBQUssS0FBSztBQUFBLE1BQ1QsS0FBSztBQUFBLE1BQ0wsT0FBTyxFQUFFLE1BQU07QUFBQSxNQUdmLFVBQVUsTUFBTTtBQUFBLE1BQ2hCLFVBQVU7QUFBQTtBQUFBO0FBS1osR0FBQyxHQUFHLGdCQUFnQixVQUFVLGFBQWEsUUFBUSxDQUFDLFNBQVM7QUFDNUQsUUFBSSxTQUFTLGlCQUFpQixlQUFlLEtBQUssT0FBTztBQUN4RCxXQUFLLEtBQUs7QUFBQSxRQUNULEtBQUs7QUFBQSxRQUNMLE9BQU8sRUFBRSxNQUFNLFVBQVUsS0FBSztBQUFBLFFBQzlCLFVBQVU7QUFBQTtBQUFBLFdBRUw7QUFDTixXQUFLLEtBQUs7QUFBQSxRQUNULEtBQUs7QUFBQSxRQUNMLE9BQU87QUFBQSxVQUNOLEtBQUs7QUFBQSxVQUNMO0FBQUEsVUFDQSx1QkFBdUI7QUFBQTtBQUFBLFFBRXhCLFVBQVU7QUFBQTtBQUFBO0FBQUE7QUFNYixZQUFVLFdBQVcsU0FBUztBQUc5QixNQUFJLFNBQVMsaUJBQWlCLENBQUMsWUFBWSxhQUFhLHlCQUF5QjtBQUNoRixVQUFNLGNBQWMsU0FBUyxLQUFLLFFBQVEsWUFBWSxZQUFZLE1BQU07QUFDeEUsY0FBVSxNQUFNLFdBQVcsbUJBQW1CLGFBQWEsU0FBUztBQUFBO0FBSXJFLE1BQUksQ0FBQyxrQkFBa0IsS0FBSyxVQUFVO0FBQ3JDLGNBQVUsc0JBQXNCO0FBQUE7QUFHakMsU0FBTztBQUFBO0FBR1IsbUJBQTBCLFNBQXNDO0FBQy9ELE1BQUk7QUFDSCxVQUFNLENBQUMsV0FBVyxPQUFPLE1BQU0sUUFBUTtBQUN2QyxXQUFPLE1BQU0sT0FBTyxXQUFXLEtBQUs7QUFBQSxXQUM1QixHQUFQO0FBQ0QsVUFBTSxhQUFhLEdBQUcsRUFBRSxZQUFZLFFBQVEsWUFBWSxVQUFVLFFBQVE7QUFDMUUsVUFBTTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
