var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { XMLValidator } from "fast-xml-parser";
import { canonicalURL, isValidURL, PRETTY_FEED_V3 } from "../util.js";
function validateRSS(args) {
  const { rssData, srcFile } = args;
  if (!rssData.title)
    throw new Error(`[${srcFile}] rss.title required`);
  if (!rssData.description)
    throw new Error(`[${srcFile}] rss.description required`);
  if (rssData.item)
    throw new Error(`[${srcFile}] \`item: Function\` should be \`items: Item[]\``);
  if (!Array.isArray(rssData.items))
    throw new Error(`[${srcFile}] rss.items should be an array of items`);
}
function generateRSS(args) {
  validateRSS(args);
  const { srcFile, rssData, site } = args;
  if (rssData.item)
    throw new Error(`[${srcFile}] rss() \`item()\` function was deprecated, and is now \`items: object[]\`.`);
  let xml = `<?xml version="1.0" encoding="UTF-8"?>`;
  if (typeof rssData.stylesheet === "string") {
    xml += `<?xml-stylesheet href="${rssData.stylesheet}" type="text/xsl"?>`;
  }
  xml += `<rss version="2.0"`;
  if (rssData.xmlns) {
    for (const [k, v] of Object.entries(rssData.xmlns)) {
      xml += ` xmlns:${k}="${v}"`;
    }
  }
  xml += `>`;
  xml += `<channel>`;
  xml += `<title><![CDATA[${rssData.title}]]></title>`;
  xml += `<description><![CDATA[${rssData.description}]]></description>`;
  xml += `<link>${canonicalURL(site).href}</link>`;
  if (typeof rssData.customData === "string")
    xml += rssData.customData;
  for (const result of rssData.items) {
    xml += `<item>`;
    if (typeof result !== "object")
      throw new Error(`[${srcFile}] rss.items expected an object. got: "${JSON.stringify(result)}"`);
    if (!result.title)
      throw new Error(`[${srcFile}] rss.items required "title" property is missing. got: "${JSON.stringify(result)}"`);
    if (!result.link)
      throw new Error(`[${srcFile}] rss.items required "link" property is missing. got: "${JSON.stringify(result)}"`);
    xml += `<title><![CDATA[${result.title}]]></title>`;
    const itemLink = isValidURL(result.link) ? result.link : canonicalURL(result.link, site).href;
    xml += `<link>${itemLink}</link>`;
    xml += `<guid>${itemLink}</guid>`;
    if (result.description)
      xml += `<description><![CDATA[${result.description}]]></description>`;
    if (result.pubDate) {
      if (typeof result.pubDate === "number" || typeof result.pubDate === "string") {
        result.pubDate = new Date(result.pubDate);
      } else if (result.pubDate instanceof Date === false) {
        throw new Error("[${filename}] rss.item().pubDate must be a Date");
      }
      xml += `<pubDate>${result.pubDate.toUTCString()}</pubDate>`;
    }
    if (typeof result.customData === "string")
      xml += result.customData;
    xml += `</item>`;
  }
  xml += `</channel></rss>`;
  const isValid = XMLValidator.validate(xml);
  if (isValid !== true) {
    throw new Error(isValid);
  }
  return xml;
}
function generateRSSStylesheet() {
  return PRETTY_FEED_V3;
}
function generateRssFunction(site, route) {
  return function rssUtility(args) {
    if (!site) {
      throw new Error(`[${route.component}] rss() tried to generate RSS but "buildOptions.site" missing in astro.config.mjs`);
    }
    let result = {};
    const _a = args, { dest } = _a, rssData = __objRest(_a, ["dest"]);
    const feedURL = dest || "/rss.xml";
    if (rssData.stylesheet === true) {
      rssData.stylesheet = feedURL.replace(/\.xml$/, ".xsl");
      result.xsl = {
        url: rssData.stylesheet,
        content: generateRSSStylesheet()
      };
    } else if (typeof rssData.stylesheet === "string") {
      result.xsl = {
        url: rssData.stylesheet
      };
    }
    result.xml = {
      url: feedURL,
      content: generateRSS({ rssData, site, srcFile: route.component })
    };
    return result;
  };
}
export {
  generateRSS,
  generateRSSStylesheet,
  generateRssFunction,
  validateRSS
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvcmVuZGVyL3Jzcy50cyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7OztBQUVBO0FBQ0E7QUFHTyxxQkFBcUIsTUFBNkI7QUFDeEQsUUFBTSxFQUFFLFNBQVMsWUFBWTtBQUM3QixNQUFJLENBQUMsUUFBUTtBQUFPLFVBQU0sSUFBSSxNQUFNLElBQUk7QUFDeEMsTUFBSSxDQUFDLFFBQVE7QUFBYSxVQUFNLElBQUksTUFBTSxJQUFJO0FBQzlDLE1BQUssUUFBZ0I7QUFBTSxVQUFNLElBQUksTUFBTSxJQUFJO0FBQy9DLE1BQUksQ0FBQyxNQUFNLFFBQVEsUUFBUTtBQUFRLFVBQU0sSUFBSSxNQUFNLElBQUk7QUFBQTtBQU1qRCxxQkFBcUIsTUFBK0I7QUFDMUQsY0FBWTtBQUNaLFFBQU0sRUFBRSxTQUFTLFNBQVMsU0FBUztBQUNuQyxNQUFLLFFBQWdCO0FBQU0sVUFBTSxJQUFJLE1BQU0sSUFBSTtBQUUvQyxNQUFJLE1BQU07QUFDVixNQUFJLE9BQU8sUUFBUSxlQUFlLFVBQVU7QUFDM0MsV0FBTywwQkFBMEIsUUFBUTtBQUFBO0FBRTFDLFNBQU87QUFHUCxNQUFJLFFBQVEsT0FBTztBQUNsQixlQUFXLENBQUMsR0FBRyxNQUFNLE9BQU8sUUFBUSxRQUFRLFFBQVE7QUFDbkQsYUFBTyxVQUFVLE1BQU07QUFBQTtBQUFBO0FBR3pCLFNBQU87QUFDUCxTQUFPO0FBR1AsU0FBTyxtQkFBbUIsUUFBUTtBQUNsQyxTQUFPLHlCQUF5QixRQUFRO0FBQ3hDLFNBQU8sU0FBUyxhQUFhLE1BQU07QUFDbkMsTUFBSSxPQUFPLFFBQVEsZUFBZTtBQUFVLFdBQU8sUUFBUTtBQUUzRCxhQUFXLFVBQVUsUUFBUSxPQUFPO0FBQ25DLFdBQU87QUFFUCxRQUFJLE9BQU8sV0FBVztBQUFVLFlBQU0sSUFBSSxNQUFNLElBQUksZ0RBQWdELEtBQUssVUFBVTtBQUNuSCxRQUFJLENBQUMsT0FBTztBQUFPLFlBQU0sSUFBSSxNQUFNLElBQUksa0VBQWtFLEtBQUssVUFBVTtBQUN4SCxRQUFJLENBQUMsT0FBTztBQUFNLFlBQU0sSUFBSSxNQUFNLElBQUksaUVBQWlFLEtBQUssVUFBVTtBQUN0SCxXQUFPLG1CQUFtQixPQUFPO0FBRWpDLFVBQU0sV0FBVyxXQUFXLE9BQU8sUUFBUSxPQUFPLE9BQU8sYUFBYSxPQUFPLE1BQU0sTUFBTTtBQUN6RixXQUFPLFNBQVM7QUFDaEIsV0FBTyxTQUFTO0FBQ2hCLFFBQUksT0FBTztBQUFhLGFBQU8seUJBQXlCLE9BQU87QUFDL0QsUUFBSSxPQUFPLFNBQVM7QUFFbkIsVUFBSSxPQUFPLE9BQU8sWUFBWSxZQUFZLE9BQU8sT0FBTyxZQUFZLFVBQVU7QUFDN0UsZUFBTyxVQUFVLElBQUksS0FBSyxPQUFPO0FBQUEsaUJBQ3ZCLE9BQU8sbUJBQW1CLFNBQVMsT0FBTztBQUNwRCxjQUFNLElBQUksTUFBTTtBQUFBO0FBRWpCLGFBQU8sWUFBWSxPQUFPLFFBQVE7QUFBQTtBQUVuQyxRQUFJLE9BQU8sT0FBTyxlQUFlO0FBQVUsYUFBTyxPQUFPO0FBQ3pELFdBQU87QUFBQTtBQUdSLFNBQU87QUFHUCxRQUFNLFVBQVUsYUFBYSxTQUFTO0FBQ3RDLE1BQUksWUFBWSxNQUFNO0FBRXJCLFVBQU0sSUFBSSxNQUFNO0FBQUE7QUFHakIsU0FBTztBQUFBO0FBR0QsaUNBQWlDO0FBQ3ZDLFNBQU87QUFBQTtBQUlELDZCQUE2QixNQUEwQixPQUErQjtBQUM1RixTQUFPLG9CQUFvQixNQUFzQjtBQUNoRCxRQUFJLENBQUMsTUFBTTtBQUNWLFlBQU0sSUFBSSxNQUFNLElBQUksTUFBTTtBQUFBO0FBRTNCLFFBQUksU0FBb0I7QUFDeEIsVUFBNkIsV0FBckIsV0FBcUIsSUFBWixvQkFBWSxJQUFaLENBQVQ7QUFDUixVQUFNLFVBQVUsUUFBUTtBQUN4QixRQUFJLFFBQVEsZUFBZSxNQUFNO0FBQ2hDLGNBQVEsYUFBYSxRQUFRLFFBQVEsVUFBVTtBQUMvQyxhQUFPLE1BQU07QUFBQSxRQUNaLEtBQUssUUFBUTtBQUFBLFFBQ2IsU0FBUztBQUFBO0FBQUEsZUFFQSxPQUFPLFFBQVEsZUFBZSxVQUFVO0FBQ2xELGFBQU8sTUFBTTtBQUFBLFFBQ1osS0FBSyxRQUFRO0FBQUE7QUFBQTtBQUdmLFdBQU8sTUFBTTtBQUFBLE1BQ1osS0FBSztBQUFBLE1BQ0wsU0FBUyxZQUFZLEVBQUUsU0FBUyxNQUFNLFNBQVMsTUFBTTtBQUFBO0FBRXRELFdBQU87QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
