import { renderEndpoint, renderPage } from "../../runtime/server/index.js";
import { getParams } from "../routing/index.js";
import { createResult } from "./result.js";
import { findPathItemByKey, callGetStaticPaths } from "./route-cache.js";
import { warn } from "../logger.js";
async function getParamsAndProps(opts) {
  const { logging, mod, route, routeCache, pathname } = opts;
  let params = {};
  let pageProps;
  if (route && !route.pathname) {
    if (route.params.length) {
      const paramsMatch = route.pattern.exec(pathname);
      if (paramsMatch) {
        params = getParams(route.params)(paramsMatch);
      }
    }
    let routeCacheEntry = routeCache.get(route);
    if (!routeCacheEntry) {
      warn(logging, "routeCache", `Internal Warning: getStaticPaths() called twice during the build. (${route.component})`);
      routeCacheEntry = await callGetStaticPaths(mod, route, true, logging);
      routeCache.set(route, routeCacheEntry);
    }
    const matchedStaticPath = findPathItemByKey(routeCacheEntry.staticPaths, params);
    if (!matchedStaticPath) {
      throw new Error(`[getStaticPaths] route pattern matched, but no matching static path found. (${pathname})`);
    }
    pageProps = Object.create(matchedStaticPath.props || Object.prototype);
  } else {
    pageProps = {};
  }
  return [params, pageProps];
}
async function render(opts) {
  const { experimentalStaticBuild, links, logging, origin, markdownRender, mod, pathname, scripts, renderers, resolve, route, routeCache, site } = opts;
  const [params, pageProps] = await getParamsAndProps({
    logging,
    mod,
    route,
    routeCache,
    pathname
  });
  if ((route == null ? void 0 : route.type) === "endpoint") {
    return renderEndpoint(mod, params);
  }
  const Component = await mod.default;
  if (!Component)
    throw new Error(`Expected an exported Astro component but received typeof ${typeof Component}`);
  if (!Component.isAstroComponentFactory)
    throw new Error(`Unable to SSR non-Astro component (${route == null ? void 0 : route.component})`);
  const result = createResult({
    experimentalStaticBuild,
    links,
    logging,
    markdownRender,
    origin,
    params,
    pathname,
    resolve,
    renderers,
    site,
    scripts
  });
  let html = await renderPage(result, Component, pageProps, null);
  if (experimentalStaticBuild && !/<!doctype html/i.test(html)) {
    html = "<!DOCTYPE html>\n" + html;
  }
  return html;
}
export {
  render
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvcmVuZGVyL2NvcmUudHMiXSwKICAibWFwcGluZ3MiOiAiQUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVUEsaUNBQWlDLE1BQTBEO0FBQzFGLFFBQU0sRUFBRSxTQUFTLEtBQUssT0FBTyxZQUFZLGFBQWE7QUFFdEQsTUFBSSxTQUFpQjtBQUNyQixNQUFJO0FBQ0osTUFBSSxTQUFTLENBQUMsTUFBTSxVQUFVO0FBQzdCLFFBQUksTUFBTSxPQUFPLFFBQVE7QUFDeEIsWUFBTSxjQUFjLE1BQU0sUUFBUSxLQUFLO0FBQ3ZDLFVBQUksYUFBYTtBQUNoQixpQkFBUyxVQUFVLE1BQU0sUUFBUTtBQUFBO0FBQUE7QUFHbkMsUUFBSSxrQkFBa0IsV0FBVyxJQUFJO0FBQ3JDLFFBQUksQ0FBQyxpQkFBaUI7QUFDckIsV0FBSyxTQUFTLGNBQWMsc0VBQXNFLE1BQU07QUFDeEcsd0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxNQUFNO0FBQzdELGlCQUFXLElBQUksT0FBTztBQUFBO0FBRXZCLFVBQU0sb0JBQW9CLGtCQUFrQixnQkFBZ0IsYUFBYTtBQUN6RSxRQUFJLENBQUMsbUJBQW1CO0FBQ3ZCLFlBQU0sSUFBSSxNQUFNLCtFQUErRTtBQUFBO0FBSWhHLGdCQUFZLE9BQU8sT0FBTyxrQkFBa0IsU0FBUyxPQUFPO0FBQUEsU0FDdEQ7QUFDTixnQkFBWTtBQUFBO0FBRWIsU0FBTyxDQUFDLFFBQVE7QUFBQTtBQW1CakIsc0JBQTZCLE1BQXNDO0FBQ2xFLFFBQU0sRUFBRSx5QkFBeUIsT0FBTyxTQUFTLFFBQVEsZ0JBQWdCLEtBQUssVUFBVSxTQUFTLFdBQVcsU0FBUyxPQUFPLFlBQVksU0FBUztBQUVqSixRQUFNLENBQUMsUUFBUSxhQUFhLE1BQU0sa0JBQWtCO0FBQUEsSUFDbkQ7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUE7QUFJRCxNQUFJLGdDQUFPLFVBQVMsWUFBWTtBQUMvQixXQUFPLGVBQWUsS0FBK0I7QUFBQTtBQUl0RCxRQUFNLFlBQVksTUFBTSxJQUFJO0FBQzVCLE1BQUksQ0FBQztBQUFXLFVBQU0sSUFBSSxNQUFNLDREQUE0RCxPQUFPO0FBQ25HLE1BQUksQ0FBQyxVQUFVO0FBQXlCLFVBQU0sSUFBSSxNQUFNLHNDQUFzQywrQkFBTztBQUVyRyxRQUFNLFNBQVMsYUFBYTtBQUFBLElBQzNCO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBO0FBR0QsTUFBSSxPQUFPLE1BQU0sV0FBVyxRQUFRLFdBQVcsV0FBVztBQUcxRCxNQUFJLDJCQUEyQixDQUFDLGtCQUFrQixLQUFLLE9BQU87QUFDN0QsV0FBTyxzQkFBc0I7QUFBQTtBQUc5QixTQUFPO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
