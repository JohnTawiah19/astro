var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import { bold } from "kleur/colors";
import { canonicalURL as getCanonicalURL } from "../util.js";
import { isCSSRequest } from "./dev/css.js";
import { isScriptRequest } from "./script.js";
import { renderSlot } from "../../runtime/server/index.js";
import { warn } from "../logger.js";
function createResult(args) {
  var _a, _b;
  const { experimentalStaticBuild, origin, markdownRender, params, pathname, renderers, resolve, site: buildOptionsSite } = args;
  const result = {
    styles: new Set(),
    scripts: (_a = args.scripts) != null ? _a : new Set(),
    links: (_b = args.links) != null ? _b : new Set(),
    createAstro(astroGlobal, props, slots) {
      const site = new URL(origin);
      const url = new URL("." + pathname, site);
      const canonicalURL = getCanonicalURL("." + pathname, buildOptionsSite || origin);
      return {
        __proto__: astroGlobal,
        props,
        request: {
          canonicalURL,
          params,
          url
        },
        resolve(path) {
          if (experimentalStaticBuild) {
            let extra = `This can be replaced with a dynamic import like so: await import("${path}")`;
            if (isCSSRequest(path)) {
              extra = `It looks like you are resolving styles. If you are adding a link tag, replace with this:

<style global>
@import "${path}";
</style>
`;
            } else if (isScriptRequest(path)) {
              extra = `It looks like you are resolving scripts. If you are adding a script tag, replace with this:

<script type="module" src={(await import("${path}?url")).default}><\/script>

or consider make it a module like so:

<script type="module" hoist>
	import MyModule from "${path}";
<\/script>
`;
            }
            warn(args.logging, `deprecation`, `${bold("Astro.resolve()")} is deprecated. We see that you are trying to resolve ${path}.
${extra}`);
            return "";
          }
          return astroGlobal.resolve(path);
        },
        slots: Object.fromEntries(Object.entries(slots || {}).map(([slotName]) => [slotName, true])),
        privateRenderSlotDoNotUse(slotName) {
          return renderSlot(result, slots ? slots[slotName] : null);
        },
        async privateRenderMarkdownDoNotUse(content, opts) {
          let [mdRender, renderOpts] = markdownRender;
          let parser = null;
          if (Array.isArray(mdRender)) {
            renderOpts = mdRender[1];
            mdRender = mdRender[0];
          }
          if (typeof mdRender === "string") {
            const mod = await import(mdRender);
            parser = mod.default;
          } else if (mdRender instanceof Promise) {
            const mod = await mdRender;
            parser = mod.default;
          } else if (typeof mdRender === "function") {
            parser = mdRender;
          } else {
            throw new Error("No Markdown parser found.");
          }
          const { code } = await parser(content, __spreadValues(__spreadValues({}, renderOpts), opts != null ? opts : {}));
          return code;
        }
      };
    },
    resolve,
    _metadata: {
      renderers,
      pathname,
      experimentalStaticBuild
    }
  };
  return result;
}
export {
  createResult
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvcmVuZGVyL3Jlc3VsdC50cyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFnQk8sc0JBQXNCLE1BQW1DO0FBdkJoRTtBQXdCQyxRQUFNLEVBQUUseUJBQXlCLFFBQVEsZ0JBQWdCLFFBQVEsVUFBVSxXQUFXLFNBQVMsTUFBTSxxQkFBcUI7QUFLMUgsUUFBTSxTQUFvQjtBQUFBLElBQ3pCLFFBQVEsSUFBSTtBQUFBLElBQ1osU0FBUyxXQUFLLFlBQUwsWUFBZ0IsSUFBSTtBQUFBLElBQzdCLE9BQU8sV0FBSyxVQUFMLFlBQWMsSUFBSTtBQUFBLElBRXpCLFlBQVksYUFBaUMsT0FBNEIsT0FBbUM7QUFDM0csWUFBTSxPQUFPLElBQUksSUFBSTtBQUNyQixZQUFNLE1BQU0sSUFBSSxJQUFJLE1BQU0sVUFBVTtBQUNwQyxZQUFNLGVBQWUsZ0JBQWdCLE1BQU0sVUFBVSxvQkFBb0I7QUFDekUsYUFBTztBQUFBLFFBQ04sV0FBVztBQUFBLFFBQ1g7QUFBQSxRQUNBLFNBQVM7QUFBQSxVQUNSO0FBQUEsVUFDQTtBQUFBLFVBQ0E7QUFBQTtBQUFBLFFBRUQsUUFBUSxNQUFjO0FBQ3JCLGNBQUkseUJBQXlCO0FBQzVCLGdCQUFJLFFBQVEscUVBQXFFO0FBQ2pGLGdCQUFJLGFBQWEsT0FBTztBQUN2QixzQkFBUTtBQUFBO0FBQUE7QUFBQSxXQUdKO0FBQUE7QUFBQTtBQUFBLHVCQUdNLGdCQUFnQixPQUFPO0FBQ2pDLHNCQUFRO0FBQUE7QUFBQSw0Q0FFNkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHlCQUtuQjtBQUFBO0FBQUE7QUFBQTtBQUtuQixpQkFDQyxLQUFLLFNBQ0wsZUFDQSxHQUFHLEtBQUssMkVBQTJFO0FBQUEsRUFDeEY7QUFHSSxtQkFBTztBQUFBO0FBR1IsaUJBQU8sWUFBWSxRQUFRO0FBQUE7QUFBQSxRQUU1QixPQUFPLE9BQU8sWUFBWSxPQUFPLFFBQVEsU0FBUyxJQUFJLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxVQUFVO0FBQUEsUUFFckYsMEJBQTBCLFVBQWtCO0FBQzNDLGlCQUFPLFdBQVcsUUFBUSxRQUFRLE1BQU0sWUFBWTtBQUFBO0FBQUEsY0FHL0MsOEJBQThCLFNBQWlCLE1BQVc7QUFDL0QsY0FBSSxDQUFDLFVBQVUsY0FBYztBQUM3QixjQUFJLFNBQWdDO0FBRXBDLGNBQUksTUFBTSxRQUFRLFdBQVc7QUFDNUIseUJBQWEsU0FBUztBQUN0Qix1QkFBVyxTQUFTO0FBQUE7QUFHckIsY0FBSSxPQUFPLGFBQWEsVUFBVTtBQUNqQyxrQkFBTSxNQUFtQyxNQUFNLE9BQU87QUFDdEQscUJBQVMsSUFBSTtBQUFBLHFCQUdMLG9CQUFvQixTQUFTO0FBQ3JDLGtCQUFNLE1BQW1DLE1BQU07QUFDL0MscUJBQVMsSUFBSTtBQUFBLHFCQUNILE9BQU8sYUFBYSxZQUFZO0FBQzFDLHFCQUFTO0FBQUEsaUJBQ0g7QUFDTixrQkFBTSxJQUFJLE1BQU07QUFBQTtBQUVqQixnQkFBTSxFQUFFLFNBQVMsTUFBTSxPQUFPLFNBQVMsa0NBQUssYUFBZ0Isc0JBQVE7QUFDcEUsaUJBQU87QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUlWO0FBQUEsSUFDQSxXQUFXO0FBQUEsTUFDVjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUE7QUFBQTtBQUlGLFNBQU87QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
