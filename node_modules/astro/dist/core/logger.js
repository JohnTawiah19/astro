import { bold, blue, dim, red, grey, underline, yellow } from "kleur/colors";
import { performance } from "perf_hooks";
import { Writable } from "stream";
import stringWidth from "string-width";
import debugPackage from "debug";
import { format as utilFormat } from "util";
function getLoggerLocale() {
  const defaultLocale = "en-US";
  if (process.env.LANG) {
    const extractedLocale = process.env.LANG.split(".")[0].replace(/_/g, "-");
    if (extractedLocale.length < 2)
      return defaultLocale;
    else
      return extractedLocale.substring(0, 5);
  } else
    return defaultLocale;
}
const dt = new Intl.DateTimeFormat(getLoggerLocale(), {
  hour: "2-digit",
  minute: "2-digit"
});
const defaultLogDestination = new Writable({
  objectMode: true,
  write(event, _, callback) {
    let dest = process.stderr;
    if (levels[event.level] < levels["error"]) {
      dest = process.stdout;
    }
    dest.write(dim(dt.format(new Date()) + " "));
    let type = event.type;
    if (type) {
      if (event.level === "info") {
        type = bold(blue(type));
      } else if (event.level === "warn") {
        type = bold(yellow(type));
      } else if (event.level === "error") {
        type = bold(red(type));
      }
      dest.write(`[${type}] `);
    }
    dest.write(utilFormat(...event.args));
    dest.write("\n");
    callback();
  }
});
const defaultLogOptions = {
  dest: defaultLogDestination,
  level: "info"
};
const levels = {
  debug: 20,
  info: 30,
  warn: 40,
  error: 50,
  silent: 90
};
function enableVerboseLogging() {
  debugPackage.enable("*,-babel");
  debug("cli", '--verbose flag enabled! Enabling: DEBUG="*,-babel"');
  debug("cli", 'Tip: Set the DEBUG env variable directly for more control. Example: "DEBUG=astro:*,vite:* astro build".');
}
function log(opts = {}, level, type, ...args) {
  var _a, _b;
  const logLevel = (_a = opts.level) != null ? _a : defaultLogOptions.level;
  const dest = (_b = opts.dest) != null ? _b : defaultLogOptions.dest;
  const event = {
    type,
    level,
    args,
    message: ""
  };
  if (levels[logLevel] > levels[level]) {
    return;
  }
  dest.write(event);
}
const debuggers = {};
function debug(type, ...messages) {
  const namespace = `astro:${type}`;
  debuggers[namespace] = debuggers[namespace] || debugPackage(namespace);
  return debuggers[namespace](...messages);
}
function info(opts, type, ...messages) {
  return log(opts, "info", type, ...messages);
}
function warn(opts, type, ...messages) {
  return log(opts, "warn", type, ...messages);
}
function error(opts, type, ...messages) {
  return log(opts, "error", type, ...messages);
}
function table(opts, columns) {
  return function logTable(logFn, ...input) {
    const messages = columns.map((len, i) => padStr(input[i].toString(), len));
    logFn(opts, null, ...messages);
  };
}
function parseError(opts, err) {
  if (!err.frame) {
    return error(opts, "parse-error", err.message || err);
  }
  let frame = err.frame.replace(/^([0-9]+)(:)/gm, `${bold("$1")} \u2502`).replace(/(?<=^\s+)(\^)/gm, bold(red(" ^"))).replace(/^/gm, "   ");
  error(opts, "parse-error", `
 ${underline(bold(grey(`${err.filename || ""}:${err.start.line}:${err.start.column}`)))}
 ${bold(red(`\u{1D605} ${err.message}`))}
${frame}
`);
}
const logger = {
  info: info.bind(null, defaultLogOptions),
  warn: warn.bind(null, defaultLogOptions),
  error: error.bind(null, defaultLogOptions)
};
function padStr(str, len) {
  const strLen = stringWidth(str);
  if (strLen > len) {
    return str.substring(0, len - 3) + "...";
  }
  const spaces = Array.from({ length: len - strLen }, () => " ").join("");
  return str + spaces;
}
let defaultLogLevel;
if (process.argv.includes("--verbose")) {
  defaultLogLevel = "debug";
} else if (process.argv.includes("--silent")) {
  defaultLogLevel = "silent";
} else {
  defaultLogLevel = "info";
}
function timerMessage(message, startTime = performance.now()) {
  let timeDiff = performance.now() - startTime;
  let timeDisplay = timeDiff < 750 ? `${Math.round(timeDiff)}ms` : `${(timeDiff / 1e3).toFixed(1)}s`;
  return `${message}   ${dim(timeDisplay)}`;
}
export {
  debug,
  defaultLogDestination,
  defaultLogLevel,
  defaultLogOptions,
  enableVerboseLogging,
  error,
  info,
  levels,
  log,
  logger,
  parseError,
  table,
  timerMessage,
  warn
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NvcmUvbG9nZ2VyLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUEsMkJBQW1DO0FBQ2xDLFFBQU0sZ0JBQWdCO0FBQ3RCLE1BQUksUUFBUSxJQUFJLE1BQU07QUFDckIsVUFBTSxrQkFBa0IsUUFBUSxJQUFJLEtBQUssTUFBTSxLQUFLLEdBQUcsUUFBUSxNQUFNO0FBR3JFLFFBQUksZ0JBQWdCLFNBQVM7QUFBRyxhQUFPO0FBQUE7QUFDbEMsYUFBTyxnQkFBZ0IsVUFBVSxHQUFHO0FBQUE7QUFDbkMsV0FBTztBQUFBO0FBR2YsTUFBTSxLQUFLLElBQUksS0FBSyxlQUFlLG1CQUFtQjtBQUFBLEVBQ3JELE1BQU07QUFBQSxFQUNOLFFBQVE7QUFBQTtBQUdGLE1BQU0sd0JBQXdCLElBQUksU0FBUztBQUFBLEVBQ2pELFlBQVk7QUFBQSxFQUNaLE1BQU0sT0FBbUIsR0FBRyxVQUFVO0FBQ3JDLFFBQUksT0FBc0IsUUFBUTtBQUNsQyxRQUFJLE9BQU8sTUFBTSxTQUFTLE9BQU8sVUFBVTtBQUMxQyxhQUFPLFFBQVE7QUFBQTtBQUdoQixTQUFLLE1BQU0sSUFBSSxHQUFHLE9BQU8sSUFBSSxVQUFVO0FBRXZDLFFBQUksT0FBTyxNQUFNO0FBQ2pCLFFBQUksTUFBTTtBQUNULFVBQUksTUFBTSxVQUFVLFFBQVE7QUFDM0IsZUFBTyxLQUFLLEtBQUs7QUFBQSxpQkFDUCxNQUFNLFVBQVUsUUFBUTtBQUNsQyxlQUFPLEtBQUssT0FBTztBQUFBLGlCQUNULE1BQU0sVUFBVSxTQUFTO0FBQ25DLGVBQU8sS0FBSyxJQUFJO0FBQUE7QUFHakIsV0FBSyxNQUFNLElBQUk7QUFBQTtBQUdoQixTQUFLLE1BQU0sV0FBVyxHQUFHLE1BQU07QUFDL0IsU0FBSyxNQUFNO0FBRVg7QUFBQTtBQUFBO0FBZ0JLLE1BQU0sb0JBQTBDO0FBQUEsRUFDdEQsTUFBTTtBQUFBLEVBQ04sT0FBTztBQUFBO0FB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
