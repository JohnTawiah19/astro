import * as path from "path";
import esbuild from "esbuild";
import { isCSSRequest } from "../core/render/dev/css.js";
const PLUGIN_NAME = "@astrojs/rollup-plugin-build-css";
const ASTRO_STYLE_PREFIX = "@astro-inline-style";
const ASTRO_PAGE_STYLE_PREFIX = "@astro-page-all-styles";
function getAstroPageStyleId(pathname) {
  let styleId = ASTRO_PAGE_STYLE_PREFIX + pathname;
  if (styleId.endsWith("/")) {
    styleId += "index";
  }
  styleId += ".js";
  return styleId;
}
function getAstroStyleId(pathname) {
  let styleId = ASTRO_STYLE_PREFIX + pathname;
  if (styleId.endsWith("/")) {
    styleId += "index";
  }
  return styleId;
}
function getAstroStylePathFromId(id) {
  return id.substr(ASTRO_STYLE_PREFIX.length + 1);
}
function isStyleVirtualModule(id) {
  return id.startsWith(ASTRO_STYLE_PREFIX);
}
function isPageStyleVirtualModule(id) {
  return id.startsWith(ASTRO_PAGE_STYLE_PREFIX);
}
function rollupPluginAstroBuildCSS(options) {
  const { internals } = options;
  const styleSourceMap = new Map();
  return {
    name: PLUGIN_NAME,
    configResolved(resolvedConfig) {
      const plugins = resolvedConfig.plugins;
      const viteCSSPostIndex = resolvedConfig.plugins.findIndex((p) => p.name === "vite:css-post");
      if (viteCSSPostIndex !== -1) {
        const viteCSSPost = plugins[viteCSSPostIndex];
        delete viteCSSPost.renderChunk;
        delete viteCSSPost.generateBundle;
        const ourIndex = plugins.findIndex((p) => p.name === PLUGIN_NAME);
        const ourPlugin = plugins[ourIndex];
        plugins.splice(ourIndex, 1);
        plugins.splice(viteCSSPostIndex - 1, 0, ourPlugin);
      }
    },
    async resolveId(id) {
      if (isPageStyleVirtualModule(id)) {
        return id;
      }
      if (isStyleVirtualModule(id)) {
        return id;
      }
      return void 0;
    },
    async load(id) {
      if (isPageStyleVirtualModule(id)) {
        return internals.astroPageStyleMap.get(id) || null;
      }
      if (isStyleVirtualModule(id)) {
        return internals.astroStyleMap.get(id) || null;
      }
      return null;
    },
    async transform(value, id) {
      if (isStyleVirtualModule(id)) {
        styleSourceMap.set(id, value);
      }
      if (isCSSRequest(id)) {
        styleSourceMap.set(id, value);
      }
      return null;
    },
    async renderChunk(_code, chunk) {
      let chunkCSS = "";
      let isPureCSS = true;
      for (const [id] of Object.entries(chunk.modules)) {
        if (!isCSSRequest(id) && !isPageStyleVirtualModule(id)) {
          isPureCSS = false;
        }
        if (styleSourceMap.has(id)) {
          chunkCSS += styleSourceMap.get(id);
        }
      }
      if (!chunkCSS)
        return null;
      if (isPureCSS) {
        internals.pureCSSChunks.add(chunk);
      }
      const { code: minifiedCSS } = await esbuild.transform(chunkCSS, {
        loader: "css",
        minify: true
      });
      const referenceId = this.emitFile({
        name: chunk.name + ".css",
        type: "asset",
        source: minifiedCSS
      });
      internals.chunkToReferenceIdMap.set(chunk.fileName, referenceId);
      if (chunk.type === "chunk") {
        const fileName = this.getFileName(referenceId);
        if (chunk.facadeModuleId) {
          const facadeId = chunk.facadeModuleId;
          if (!internals.facadeIdToAssetsMap.has(facadeId)) {
            internals.facadeIdToAssetsMap.set(facadeId, []);
          }
          internals.facadeIdToAssetsMap.get(facadeId).push(fileName);
        }
      }
      return null;
    },
    generateBundle(opts, bundle) {
      const hasPureCSSChunks = internals.pureCSSChunks.size;
      const pureChunkFilenames = new Set([...internals.pureCSSChunks].map((chunk) => chunk.fileName));
      const emptyChunkFiles = [...pureChunkFilenames].map((file) => path.basename(file)).join("|").replace(/\./g, "\\.");
      const emptyChunkRE = new RegExp(opts.format === "es" ? `\\bimport\\s*"[^"]*(?:${emptyChunkFiles})";
?` : `\\brequire\\(\\s*"[^"]*(?:${emptyChunkFiles})"\\);
?`, "g");
      for (const [chunkId, chunk] of Object.entries(bundle)) {
        if (chunk.type === "chunk") {
          if (chunk.facadeModuleId) {
            if (!internals.facadeIdToAssetsMap.has(chunk.facadeModuleId)) {
              internals.facadeIdToAssetsMap.set(chunk.facadeModuleId, []);
            }
            const assets = internals.facadeIdToAssetsMap.get(chunk.facadeModuleId);
            const assetSet = new Set(assets);
            for (const imp of chunk.imports) {
              if (internals.chunkToReferenceIdMap.has(imp) && !pureChunkFilenames.has(imp)) {
                const referenceId = internals.chunkToReferenceIdMap.get(imp);
                const fileName = this.getFileName(referenceId);
                if (!assetSet.has(fileName)) {
                  assetSet.add(fileName);
                  assets.push(fileName);
                }
              }
            }
          }
          if (hasPureCSSChunks) {
            if (internals.pureCSSChunks.has(chunk)) {
              delete bundle[chunkId];
            } else {
              chunk.code = chunk.code.replace(emptyChunkRE, (m) => `/* empty css ${"".padEnd(m.length - 15)}*/`);
            }
          }
        }
      }
    }
  };
}
export {
  getAstroPageStyleId,
  getAstroStyleId,
  getAstroStylePathFromId,
  rollupPluginAstroBuildCSS
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWJ1aWxkLWNzcy9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUVBO0FBQ0E7QUFFQTtBQUVBLE1BQU0sY0FBYztBQUdwQixNQUFNLHFCQUFxQjtBQUUzQixNQUFNLDBCQUEwQjtBQUV6Qiw2QkFBNkIsVUFBa0I7QUFDckQsTUFBSSxVQUFVLDBCQUEwQjtBQUN4QyxNQUFJLFFBQVEsU0FBUyxNQUFNO0FBQzFCLGVBQVc7QUFBQTtBQUVaLGFBQVc7QUFDWCxTQUFPO0FBQUE7QUFHRCx5QkFBeUIsVUFBa0I7QUFDakQsTUFBSSxVQUFVLHFCQUFxQjtBQUNuQyxNQUFJLFFBQVEsU0FBUyxNQUFNO0FBQzFCLGVBQVc7QUFBQTtBQUVaLFNBQU87QUFBQTtBQUdELGlDQUFpQyxJQUFZO0FBQ25ELFNBQU8sR0FBRyxPQUFPLG1CQUFtQixTQUFTO0FBQUE7QUFHOUMsOEJBQThCLElBQVk7QUFDekMsU0FBTyxHQUFHLFdBQVc7QUFBQTtBQUd0QixrQ0FBa0MsSUFBWTtBQUM3QyxTQUFPLEdBQUcsV0FBVztBQUFBO0FBT2YsbUNBQW1DLFNBQW9DO0FBQzdFLFFBQU0sRUFBRSxjQUFjO0FBQ3RCLFFBQU0saUJBQWlCLElBQUk7QUFFM0IsU0FBTztBQUFBLElBQ04sTUFBTTtBQUFBLElBRU4sZUFBZSxnQkFBZ0I7QUFLOUIsWUFBTSxVQUFVLGVBQWU7QUFDL0IsWUFBTSxtQkFBbUIsZUFBZSxRQUFRLFVBQVUsQ0FBQyxNQUFNLEVBQUUsU0FBUztBQUM1RSxVQUFJLHFCQUFxQixJQUFJO0FBQzVCLGNBQU0sY0FBYyxRQUFRO0FBRzVCLGVBQU8sWUFBWTtBQUNuQixlQUFPLFlBQVk7QUFHbkIsY0FBTSxXQUFXLFFBQVEsVUFBVSxDQUFDLE1BQU0sRUFBRSxTQUFTO0FBQ3JELGNBQU0sWUFBWSxRQUFRO0FBRzFCLGdCQUFRLE9BQU8sVUFBVTtBQUN6QixnQkFBUSxPQUFPLG1CQUFtQixHQUFHLEdBQUc7QUFBQTtBQUFBO0FBQUEsVUFJcEMsVUFBVSxJQUFJO0FBQ25CLFVBQUkseUJBQXlCLEtBQUs7QUFDakMsZUFBTztBQUFBO0FBRVIsVUFBSSxxQkFBcUIsS0FBSztBQUM3QixlQUFPO0FBQUE7QUFFUixhQUFPO0FBQUE7QUFBQSxVQUdGLEtBQUssSUFBSTtBQUNkLFVBQUkseUJBQXlCLEtBQUs7QUFDakMsZUFBTyxVQUFVLGtCQUFrQixJQUFJLE9BQU87QUFBQTtBQUUvQyxVQUFJLHFCQUFxQixLQUFLO0FBQzdCLGVBQU8sVUFBVSxjQUFjLElBQUksT0FBTztBQUFBO0FBRTNDLGFBQU87QUFBQTtBQUFBLFVBR0YsVUFBVSxPQUFPLElBQUk7QUFDMUIsVUFBSSxxQkFBcUIsS0FBSztBQUM3Qix1QkFBZSxJQUFJLElBQUk7QUFBQTtBQUV4QixVQUFJLGFBQWEsS0FBSztBQUNyQix1QkFBZSxJQUFJLElBQUk7QUFBQTtBQUV4QixhQUFPO0FBQUE7QUFBQSxVQUdGLFlBQVksT0FBTyxPQUFPO0FBQy9CLFVBQUksV0FBVztBQUNmLFVBQUksWUFBWTtBQUNoQixpQkFBVyxDQUFDLE9BQU8sT0FBTyxRQUFRLE1BQU0sVUFBVTtBQUNqRCxZQUFJLENBQUMsYUFBYSxPQUFPLENBQUMseUJBQXlCLEtBQUs7QUFDdkQsc0JBQVk7QUFBQTtBQUViLFlBQUksZUFBZSxJQUFJLEtBQUs7QUFDM0Isc0JBQVksZUFBZSxJQUFJO0FBQUE7QUFBQTtBQUlqQyxVQUFJLENBQUM7QUFBVSxlQUFPO0FBRXRCLFVBQUksV0FBVztBQUNkLGtCQUFVLGNBQWMsSUFBSTtBQUFBO0FBRzdCLFlBQU0sRUFBRSxNQUFNLGdCQUFnQixNQUFNLFFBQVEsVUFBVSxVQUFVO0FBQUEsUUFDL0QsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBO0FBRVQsWUFBTSxjQUFjLEtBQUssU0FBUztBQUFBLFFBQ2pDLE1BQU0sTUFBTSxPQUFPO0FBQUEsUUFDbkIsTUFBTTtBQUFBLFFBQ04sUUFBUTtBQUFBO0FBR1QsZ0JBQVUsc0JBQXNCLElBQUksTUFBTSxVQUFVO0FBQ3BELFVBQUksTUFBTSxTQUFTLFNBQVM7QUFDM0IsY0FBTSxXQUFXLEtBQUssWUFBWTtBQUNsQyxZQUFJLE1BQU0sZ0JBQWdCO0FBQ3pCLGdCQUFNLFdBQVcsTUFBTTtBQUN2QixjQUFJLENBQUMsVUFBVSxvQkFBb0IsSUFBSSxXQUFXO0FBQ2pELHNCQUFVLG9CQUFvQixJQUFJLFVBQVU7QUFBQTtBQUU3QyxvQkFBVSxvQkFBb0IsSUFBSSxVQUFXLEtBQUs7QUFBQTtBQUFBO0FBSXBELGFBQU87QUFBQTtBQUFBLElBSVIsZUFBZSxNQUFNLFFBQVE7QUFDNUIsWUFBTSxtQkFBbUIsVUFBVSxjQUFjO0FBQ2pELFlBQU0scUJBQXFCLElBQUksSUFBSSxDQUFDLEdBQUcsVUFBVSxlQUFlLElBQUksQ0FBQyxVQUFVLE1BQU07QUFDckYsWUFBTSxrQkFBa0IsQ0FBQyxHQUFHLG9CQUMxQixJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsT0FDNUIsS0FBSyxLQUNMLFFBQVEsT0FBTztBQUNqQixZQUFNLGVBQWUsSUFBSSxPQUFPLEtBQUssV0FBVyxPQUFPLHlCQUF5QjtBQUFBLEtBQTBCLDZCQUE2QjtBQUFBLElBQTRCO0FBRW5LLGlCQUFXLENBQUMsU0FBUyxVQUFVLE9BQU8sUUFBUSxTQUFTO0FBQ3RELFlBQUksTUFBTSxTQUFTLFNBQVM7QUFJM0IsY0FBSSxNQUFNLGdCQUFnQjtBQUN6QixnQkFBSSxDQUFDLFVBQVUsb0JBQW9CLElBQUksTUFBTSxpQkFBaUI7QUFDN0Qsd0JBQVUsb0JBQW9CLElBQUksTUFBTSxnQkFBZ0I7QUFBQTtBQUV6RCxrQkFBTSxTQUFTLFVBQVUsb0JBQW9CLElBQUksTUFBTTtBQUN2RCxrQkFBTSxXQUFXLElBQUksSUFBSTtBQUN6Qix1QkFBVyxPQUFPLE1BQU0sU0FBUztBQUNoQyxrQkFBSSxVQUFVLHNCQUFzQixJQUFJLFFBQVEsQ0FBQyxtQkFBbUIsSUFBSSxNQUFNO0FBQzdFLHNCQUFNLGNBQWMsVUFBVSxzQkFBc0IsSUFBSTtBQUN4RCxzQkFBTSxXQUFXLEtBQUssWUFBWTtBQUNsQyxvQkFBSSxDQUFDLFNBQVMsSUFBSSxXQUFXO0FBQzVCLDJCQUFTLElBQUk7QUFDYix5QkFBTyxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFPaEIsY0FBSSxrQkFBa0I7QUFDckIsZ0JBQUksVUFBVSxjQUFjLElBQUksUUFBUTtBQUd2QyxxQkFBTyxPQUFPO0FBQUEsbUJBQ1I7QUFHTixvQkFBTSxPQUFPLE1BQU0sS0FBSyxRQUN2QixjQUVBLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLEVBQUUsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
