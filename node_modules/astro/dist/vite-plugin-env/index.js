import MagicString from "magic-string";
import { fileURLToPath } from "url";
import { loadEnv } from "vite";
function getPrivateEnv(viteConfig, astroConfig) {
  var _a;
  let envPrefixes = ["PUBLIC_"];
  if (viteConfig.envPrefix) {
    envPrefixes = Array.isArray(viteConfig.envPrefix) ? viteConfig.envPrefix : [viteConfig.envPrefix];
  }
  const fullEnv = loadEnv(viteConfig.mode, (_a = viteConfig.envDir) != null ? _a : fileURLToPath(astroConfig.projectRoot), "");
  const privateKeys = Object.keys(fullEnv).filter((key) => {
    if (typeof process.env[key] !== "undefined")
      return false;
    for (const envPrefix of envPrefixes) {
      if (key.startsWith(envPrefix))
        return false;
    }
    return true;
  });
  if (privateKeys.length === 0) {
    return null;
  }
  return Object.fromEntries(privateKeys.map((key) => [key, fullEnv[key]]));
}
function referencesPrivateKey(source, privateEnv) {
  for (const key of Object.keys(privateEnv)) {
    if (source.includes(key))
      return true;
  }
  return false;
}
function envVitePlugin({ config: astroConfig }) {
  let privateEnv;
  let config;
  return {
    name: "astro:vite-plugin-env",
    enforce: "pre",
    configResolved(resolvedConfig) {
      config = resolvedConfig;
      if (config.envPrefix) {
      }
    },
    async transform(source, id, options) {
      const ssr = (options == null ? void 0 : options.ssr) === true;
      if (!ssr)
        return source;
      if (!source.includes("import.meta"))
        return source;
      if (!/\benv\b/.test(source))
        return source;
      if (typeof privateEnv === "undefined") {
        privateEnv = getPrivateEnv(config, astroConfig);
      }
      if (!privateEnv)
        return source;
      if (!referencesPrivateKey(source, privateEnv))
        return source;
      const s = new MagicString(source);
      s.prepend(`import.meta.env = new Proxy(import.meta.env, {get(target, prop, reciever) {const PRIVATE = ${JSON.stringify(privateEnv)};if (typeof PRIVATE[prop] !== 'undefined') {return PRIVATE[prop];}return Reflect.get(target, prop, reciever);}});
`);
      return s.toString();
    }
  };
}
export {
  envVitePlugin as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWVudi9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUVBO0FBQ0E7QUFDQTtBQU1BLHVCQUF1QixZQUFpQyxhQUEwQjtBQVZsRjtBQVdDLE1BQUksY0FBd0IsQ0FBQztBQUM3QixNQUFJLFdBQVcsV0FBVztBQUN6QixrQkFBYyxNQUFNLFFBQVEsV0FBVyxhQUFhLFdBQVcsWUFBWSxDQUFDLFdBQVc7QUFBQTtBQUV4RixRQUFNLFVBQVUsUUFBUSxXQUFXLE1BQU0saUJBQVcsV0FBWCxZQUFxQixjQUFjLFlBQVksY0FBYztBQUN0RyxRQUFNLGNBQWMsT0FBTyxLQUFLLFNBQVMsT0FBTyxDQUFDLFFBQVE7QUFHeEQsUUFBSSxPQUFPLFFBQVEsSUFBSSxTQUFTO0FBQWEsYUFBTztBQUdwRCxlQUFXLGFBQWEsYUFBYTtBQUNwQyxVQUFJLElBQUksV0FBVztBQUFZLGVBQU87QUFBQTtBQUl2QyxXQUFPO0FBQUE7QUFFUixNQUFJLFlBQVksV0FBVyxHQUFHO0FBQzdCLFdBQU87QUFBQTtBQUVSLFNBQU8sT0FBTyxZQUFZLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLFFBQVE7QUFBQTtBQUdsRSw4QkFBOEIsUUFBZ0IsWUFBaUM7QUFDOUUsYUFBVyxPQUFPLE9BQU8sS0FBSyxhQUFhO0FBQzFDLFFBQUksT0FBTyxTQUFTO0FBQU0sYUFBTztBQUFBO0FBRWxDLFNBQU87QUFBQTtBQUdPLHVCQUF1QixFQUFFLFFBQVEsZUFBb0Q7QUFDbkcsTUFBSTtBQUNKLE1BQUk7QUFDSixTQUFPO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixTQUFTO0FBQUEsSUFFVCxlQUFlLGdCQUFnQjtBQUM5QixlQUFTO0FBQ1QsVUFBSSxPQUFPLFdBQVc7QUFBQTtBQUFBO0FBQUEsVUFJakIsVUFBVSxRQUFRLElBQUksU0FBUztBQUNwQyxZQUFNLE1BQU0sb0NBQVMsU0FBUTtBQUM3QixVQUFJLENBQUM7QUFBSyxlQUFPO0FBQ2pCLFVBQUksQ0FBQyxPQUFPLFNBQVM7QUFBZ0IsZUFBTztBQUM1QyxVQUFJLENBQUMsVUFBVSxLQUFLO0FBQVMsZUFBTztBQUVwQyxVQUFJLE9BQU8sZUFBZSxhQUFhO0FBQ3RDLHFCQUFhLGNBQWMsUUFBUTtBQUFBO0FBRXBDLFVBQUksQ0FBQztBQUFZLGVBQU87QUFDeEIsVUFBSSxDQUFDLHFCQUFxQixRQUFRO0FBQWEsZUFBTztBQUV0RCxZQUFNLElBQUksSUFBSSxZQUFZO0FBRTFCLFFBQUUsUUFBUSw4RkFFVyxLQUFLLFVBQVU7QUFBQTtBQVFwQyxhQUFPLEVBQUU7QUFBQTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
