import { info } from "../core/logger.js";
import { createRouteManifest, matchRoute } from "../core/routing/index.js";
import stripAnsi from "strip-ansi";
import { createSafeError } from "../core/util.js";
import { ssr } from "../core/render/dev/index.js";
import * as msg from "../core/messages.js";
import notFoundTemplate, { subpathNotUsedTemplate } from "../template/4xx.js";
import serverErrorTemplate from "../template/5xx.js";
import { RouteCache } from "../core/render/route-cache.js";
const BAD_VITE_MIDDLEWARE = ["viteIndexHtmlMiddleware", "vite404Middleware", "viteSpaFallbackMiddleware"];
function removeViteHttpMiddleware(server) {
  for (let i = server.stack.length - 1; i > 0; i--) {
    if (BAD_VITE_MIDDLEWARE.includes(server.stack[i].handle.name)) {
      server.stack.splice(i, 1);
    }
  }
}
function writeHtmlResponse(res, statusCode, html) {
  res.writeHead(statusCode, {
    "Content-Type": "text/html; charset=utf-8",
    "Content-Length": Buffer.byteLength(html, "utf-8")
  });
  res.write(html);
  res.end();
}
async function handle404Response(origin, config, req, res) {
  const site = config.buildOptions.site ? new URL(config.buildOptions.site) : void 0;
  const devRoot = site ? site.pathname : "/";
  const pathname = decodeURI(new URL(origin + req.url).pathname);
  let html = "";
  if (pathname === "/" && !pathname.startsWith(devRoot)) {
    html = subpathNotUsedTemplate(devRoot, pathname);
  } else {
    html = notFoundTemplate({ statusCode: 404, title: "Not found", tabTitle: "404: Not Found", pathname });
  }
  writeHtmlResponse(res, 404, html);
}
async function handle500Response(viteServer, origin, req, res, err) {
  const pathname = decodeURI(new URL(origin + req.url).pathname);
  const html = serverErrorTemplate({
    statusCode: 500,
    title: "Internal Error",
    tabTitle: "500: Error",
    message: stripAnsi(err.message),
    url: err.url || void 0,
    stack: stripAnsi(err.stack)
  });
  const transformedHtml = await viteServer.transformIndexHtml(pathname, html, pathname);
  writeHtmlResponse(res, 500, transformedHtml);
}
async function handleRequest(routeCache, viteServer, logging, manifest, config, req, res) {
  const reqStart = performance.now();
  const site = config.buildOptions.site ? new URL(config.buildOptions.site) : void 0;
  const devRoot = site ? site.pathname : "/";
  const origin = `${viteServer.config.server.https ? "https" : "http"}://${req.headers.host}`;
  const pathname = decodeURI(new URL(origin + req.url).pathname);
  const rootRelativeUrl = pathname.substring(devRoot.length - 1);
  try {
    if (!pathname.startsWith(devRoot)) {
      info(logging, "astro", msg.req({ url: pathname, statusCode: 404 }));
      return handle404Response(origin, config, req, res);
    }
    let route = matchRoute(rootRelativeUrl, manifest);
    const statusCode = route ? 200 : 404;
    if (!route) {
      const relPages = config.pages.href.replace(config.projectRoot.href, "");
      route = manifest.routes.find((r) => r.component === relPages + "404.astro");
    }
    if (!route) {
      info(logging, "astro", msg.req({ url: pathname, statusCode: 404 }));
      handle404Response(origin, config, req, res);
      return;
    }
    const html = await ssr({
      astroConfig: config,
      filePath: new URL(`./${route.component}`, config.projectRoot),
      logging,
      mode: "development",
      origin,
      pathname: rootRelativeUrl,
      route,
      routeCache,
      viteServer
    });
    writeHtmlResponse(res, statusCode, html);
  } catch (_err) {
    info(logging, "astro", msg.req({ url: pathname, statusCode: 500 }));
    const err = createSafeError(_err);
    handle500Response(viteServer, origin, req, res, err);
  }
}
function createPlugin({ config, logging }) {
  return {
    name: "astro:server",
    configureServer(viteServer) {
      let routeCache = new RouteCache(logging);
      let manifest = createRouteManifest({ config }, logging);
      function rebuildManifest(needsManifestRebuild, file) {
        routeCache.clearAll();
        if (needsManifestRebuild) {
          manifest = createRouteManifest({ config }, logging);
        }
      }
      viteServer.watcher.on("add", rebuildManifest.bind(null, true));
      viteServer.watcher.on("unlink", rebuildManifest.bind(null, true));
      viteServer.watcher.on("change", rebuildManifest.bind(null, false));
      return () => {
        removeViteHttpMiddleware(viteServer.middlewares);
        viteServer.middlewares.use(async (req, res) => {
          if (!req.url || !req.method) {
            throw new Error("Incomplete request");
          }
          handleRequest(routeCache, viteServer, logging, manifest, config, req, res);
        });
      };
    }
  };
}
export {
  createPlugin as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWFzdHJvLXNlcnZlci9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQU9BLE1BQU0sc0JBQXNCLENBQUMsMkJBQTJCLHFCQUFxQjtBQUM3RSxrQ0FBa0MsUUFBNkI7QUFDOUQsV0FBUyxJQUFJLE9BQU8sTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLEtBQUs7QUFFakQsUUFBSSxvQkFBb0IsU0FBUyxPQUFPLE1BQU0sR0FBRyxPQUFPLE9BQU87QUFDOUQsYUFBTyxNQUFNLE9BQU8sR0FBRztBQUFBO0FBQUE7QUFBQTtBQUsxQiwyQkFBMkIsS0FBMEIsWUFBb0IsTUFBYztBQUN0RixNQUFJLFVBQVUsWUFBWTtBQUFBLElBQ3pCLGdCQUFnQjtBQUFBLElBQ2hCLGtCQUFrQixPQUFPLFdBQVcsTUFBTTtBQUFBO0FBRTNDLE1BQUksTUFBTTtBQUNWLE1BQUk7QUFBQTtBQUdMLGlDQUFpQyxRQUFnQixRQUFxQixLQUEyQixLQUEwQjtBQUMxSCxRQUFNLE9BQU8sT0FBTyxhQUFhLE9BQU8sSUFBSSxJQUFJLE9BQU8sYUFBYSxRQUFRO0FBQzVFLFFBQU0sVUFBVSxPQUFPLEtBQUssV0FBVztBQUN2QyxRQUFNLFdBQVcsVUFBVSxJQUFJLElBQUksU0FBUyxJQUFJLEtBQUs7QUFDckQsTUFBSSxPQUFPO0FBQ1gsTUFBSSxhQUFhLE9BQU8sQ0FBQyxTQUFTLFdBQVcsVUFBVTtBQUN0RCxXQUFPLHVCQUF1QixTQUFTO0FBQUEsU0FDakM7QUFDTixXQUFPLGlCQUFpQixFQUFFLFlBQVksS0FBSyxPQUFPLGFBQWEsVUFBVSxrQkFBa0I7QUFBQTtBQUU1RixvQkFBa0IsS0FBSyxLQUFLO0FBQUE7QUFHN0IsaUNBQWlDLFlBQWdDLFFBQWdCLEtBQTJCLEtBQTBCLEtBQVU7QUFDL0ksUUFBTSxXQUFXLFVBQVUsSUFBSSxJQUFJLFNBQVMsSUFB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
