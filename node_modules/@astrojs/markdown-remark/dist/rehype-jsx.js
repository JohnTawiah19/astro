var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { map } from "unist-util-map";
const MDX_ELEMENTS = new Set(["mdxJsxFlowElement", "mdxJsxTextElement"]);
function rehypeJsx() {
  return function(node) {
    return map(node, (child) => {
      if (child.type === "element") {
        return __spreadProps(__spreadValues({}, child), { tagName: `${child.tagName}` });
      }
      if (MDX_ELEMENTS.has(child.type)) {
        return __spreadProps(__spreadValues({}, child), {
          type: "element",
          tagName: `${child.name}`,
          properties: child.attributes.reduce((acc, entry) => {
            let attr = entry.value;
            if (attr && typeof attr === "object") {
              attr = `{${attr.value}}`;
            } else if (attr === null) {
              attr = `{true}`;
            }
            return Object.assign(acc, { [entry.name]: attr });
          }, {})
        });
      }
      return child;
    });
  };
}
export {
  rehypeJsx as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3JlaHlwZS1qc3gudHMiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQSxNQUFNLGVBQWUsSUFBSSxJQUFJLENBQUMscUJBQXFCO0FBQ3BDLHFCQUEwQjtBQUN4QyxTQUFPLFNBQVUsTUFBZ0I7QUFDaEMsV0FBTyxJQUFJLE1BQU0sQ0FBQyxVQUFlO0FBQ2hDLFVBQUksTUFBTSxTQUFTLFdBQVc7QUFDN0IsZUFBTyxpQ0FBSyxRQUFMLEVBQVksU0FBUyxHQUFHLE1BQU07QUFBQTtBQUV0QyxVQUFJLGFBQWEsSUFBSSxNQUFNLE9BQU87QUFDakMsZUFBTyxpQ0FDSCxRQURHO0FBQUEsVUFFTixNQUFNO0FBQUEsVUFDTixTQUFTLEdBQUcsTUFBTTtBQUFBLFVBQ2xCLFlBQVksTUFBTSxXQUFXLE9BQU8sQ0FBQyxLQUFZLFVBQWU7QUFDL0QsZ0JBQUksT0FBTyxNQUFNO0FBQ2pCLGdCQUFJLFFBQVEsT0FBTyxTQUFTLFVBQVU7QUFDckMscUJBQU8sSUFBSSxLQUFLO0FBQUEsdUJBQ04sU0FBUyxNQUFNO0FBQ3pCLHFCQUFPO0FBQUE7QUFFUixtQkFBTyxPQUFPLE9BQU8sS0FBSyxHQUFHLE1BQU0sT0FBTztBQUFBLGFBQ3hDO0FBQUE7QUFBQTtBQUdMLGFBQU87QUFBQTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
