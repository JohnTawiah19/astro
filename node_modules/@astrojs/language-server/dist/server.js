"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const documents_1 = require("./core/documents");
const config_1 = require("./core/config");
const plugins_1 = require("./plugins");
const DiagnosticsManager_1 = require("./core/DiagnosticsManager");
const utils_1 = require("./utils");
const TagCloseRequest = new vscode_languageserver_1.RequestType('html/tag');
/**
 * Starts `astro-languageservice`
 */
function startServer() {
    let connection = (0, vscode_languageserver_1.createConnection)(vscode_languageserver_1.ProposedFeatures.all);
    const docManager = documents_1.DocumentManager.newInstance();
    const configManager = new config_1.ConfigManager();
    const pluginHost = new plugins_1.PluginHost(docManager);
    connection.onInitialize((evt) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const workspaceUris = (_b = (_a = evt.workspaceFolders) === null || _a === void 0 ? void 0 : _a.map((folder) => folder.uri.toString())) !== null && _b !== void 0 ? _b : [(_c = evt.rootUri) !== null && _c !== void 0 ? _c : ''];
        pluginHost.initialize({
            filterIncompleteCompletions: !((_d = evt.initializationOptions) === null || _d === void 0 ? void 0 : _d.dontFilterIncompleteCompletions),
            definitionLinkSupport: !!((_f = (_e = evt.capabilities.textDocument) === null || _e === void 0 ? void 0 : _e.definition) === null || _f === void 0 ? void 0 : _f.linkSupport),
        });
        pluginHost.register(new plugins_1.HTMLPlugin(docManager, configManager));
        pluginHost.register(new plugins_1.CSSPlugin(docManager, configManager));
        pluginHost.register(new plugins_1.TypeScriptPlugin(docManager, configManager, workspaceUris));
        pluginHost.register(new plugins_1.AstroPlugin(docManager, configManager, workspaceUris));
        configManager.update(((_j = (_h = (_g = evt.initializationOptions) === null || _g === void 0 ? void 0 : _g.configuration) === null || _h === void 0 ? void 0 : _h.astro) === null || _j === void 0 ? void 0 : _j.plugin) ||
            ((_k = evt.initializationOptions) === null || _k === void 0 ? void 0 : _k.config) ||
            {});
        configManager.updateTsJsUserPreferences(((_l = evt.initializationOptions) === null || _l === void 0 ? void 0 : _l.configuration) ||
            ((_m = evt.initializationOptions) === null || _m === void 0 ? void 0 : _m.typescriptConfig) ||
            {});
        configManager.updateEmmetConfig(((_p = (_o = evt.initializationOptions) === null || _o === void 0 ? void 0 : _o.configuration) === null || _p === void 0 ? void 0 : _p.emmet) || ((_q = evt.initializationOptions) === null || _q === void 0 ? void 0 : _q.emmetConfig) || {});
        return {
            capabilities: {
                textDocumentSync: vscode_languageserver_1.TextDocumentSyncKind.Incremental,
                foldingRangeProvider: true,
                definitionProvider: true,
                renameProvider: true,
                completionProvider: {
                    resolveProvider: true,
                    triggerCharacters: [
                        '.',
                        '"',
                        "'",
                        '`',
                        '/',
                        '@',
                        '<',
                        ' ',
                        // Emmet
                        '>',
                        '*',
                        '#',
                        '$',
                        '+',
                        '^',
                        '(',
                        '[',
                        '@',
                        '-',
                        // No whitespace because
                        // it makes for weird/too many completions
                        // of other completion providers
                        // Astro
                        ':',
                    ],
                },
                hoverProvider: true,
                signatureHelpProvider: {
                    triggerCharacters: ['(', ',', '<'],
                    retriggerCharacters: [')'],
                },
            },
        };
    });
    // Documents
    connection.onDidOpenTextDocument((evt) => {
        docManager.openDocument(Object.assign({ overrideText: true }, evt.textDocument));
        docManager.markAsOpenedInClient(evt.textDocument.uri);
    });
    connection.onDidCloseTextDocument((evt) => docManager.closeDocument(evt.textDocument.uri));
    const diagnosticsManager = new DiagnosticsManager_1.DiagnosticsManager(connection.sendDiagnostics, docManager, pluginHost.getDiagnostics.bind(pluginHost));
    const updateAllDiagnostics = (0, utils_1.debounceThrottle)(() => diagnosticsManager.updateAll(), 1000);
    connection.onDidChangeTextDocument((evt) => {
        docManager.updateDocument(evt.textDocument.uri, evt.contentChanges);
    });
    connection.onDidChangeWatchedFiles((evt) => {
        const params = evt.changes
            .map((change) => ({
            fileName: (0, utils_1.urlToPath)(change.uri),
            changeType: change.type,
        }))
            .filter((change) => !!change.fileName);
        pluginHost.onWatchFileChanges(params);
        updateAllDiagnostics();
    });
    //connection.onDidChangeTextDocument(updateAllDiagnostics);
    // Config
    connection.onDidChangeConfiguration(({ settings }) => {
        var _a;
        configManager.update((_a = settings.astro) === null || _a === void 0 ? void 0 : _a.plugin);
        configManager.updateEmmetConfig(settings.emmet);
        configManager.updateTsJsUserPreferences(settings);
    });
    // Features
    connection.onCompletion(async (evt) => {
        const promise = pluginHost.getCompletions(evt.textDocument, evt.position, evt.context);
        return promise;
    });
    connection.onCompletionResolve((completionItem) => {
        const data = completionItem.data;
        if (!data) {
            return completionItem;
        }
        return pluginHost.resolveCompletion(data, completionItem);
    });
    connection.onHover((evt) => pluginHost.doHover(evt.textDocument, evt.position));
    connection.onDefinition((evt) => pluginHost.getDefinitions(evt.textDocument, evt.position));
    connection.onFoldingRanges((evt) => pluginHost.getFoldingRanges(evt.textDocument));
    connection.onRequest(TagCloseRequest, (evt) => pluginHost.doTagComplete(evt.textDocument, evt.position));
    connection.onSignatureHelp((evt, cancellationToken) => pluginHost.getSignatureHelp(evt.textDocument, evt.position, evt.context, cancellationToken));
    connection.onRenameRequest(evt => pluginHost.rename(evt.textDocument, evt.position, evt.newName));
    docManager.on('documentChange', (0, utils_1.debounceThrottle)(async (document) => diagnosticsManager.update(document), 1000));
    docManager.on('documentClose', (document) => diagnosticsManager.removeDiagnostics(document));
    connection.listen();
}
exports.startServer = startServer;
